----------------------------------------------------------------------------------
-- Company        : Data Patterns(India) Ltd.
-- Engineer       : 
-- 
-- Create Date    : 17:55:18 04/09/2021 
-- Design Name    : DP-XMC-5775
-- Module Name    : DP_XMC_5775_top 
-- Project Name   : YIC2236 PAR Upgrade
-- Target Devices : SPARTAN 6
-- Tool versions  : Xilinx ISE 14.7
-- Description    : RTL Description of DP-XMC-5775
--
-- Dependencies   : 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
library unisim;
use unisim.vcomponents.all;

entity DP_XMC_5775_top is
Port ( 
-- PCI Interface ports
	XMC_REFCLKN_C		: in  STD_LOGIC;
	XMC_REFCLKP_C		: in  STD_LOGIC; 
	XMC_RXN0				: in  STD_LOGIC;
	XMC_RXP0				: in  STD_LOGIC;
	XMC_TXN0				: out STD_LOGIC;
	XMC_TXP0				: out STD_LOGIC; 

	--	 GPIO PINS
	TTL_IN			: IN  STD_LOGIC_VECTOR (39 DOWNTO 1); --//Change_Made
	TTL_OUT_EN		: OUT STD_LOGIC_VECTOR (39 DOWNTO 1); --//Change_Made
	TTL_OUT_F		: OUT STD_LOGIC_VECTOR (39 DOWNTO 1)  --//Change_Made
	

);		
end DP_XMC_5775_top;


architecture Behavioral of DP_XMC_5775_top is




component clock_reset is
  port ( 
	 clk_62p5Mhz		: in  std_logic;
	 sftwr_rst 			: in  std_logic;
    CLK_250MHz  		: out std_logic;
    CLK_50MHz 			: out std_logic;
    CLK_10MHz 			: out std_logic;
    CLK_100MHz 			: out std_logic;
    CLK_20MHz 			: out std_logic;
    CLK_12p8MHz 		: out std_logic;
    l_rst 				: out std_logic                
  );
end component;

component PUL_INC is
    Port ( CLK_IN : in STD_LOGIC;
           CLK_OUT : in STD_LOGIC;
           PUL_IN : in STD_LOGIC;
           PUL_OUT : out STD_LOGIC);
end component;

component xilinx_pcie_1_1_ep_s6
  port(
	 pci_exp_rxp : in  std_logic;
	 pci_exp_rxn : in  std_logic;
	 sys_clk_p 	 : in  std_logic;
	 sys_clk_n 	 : in  std_logic;
	 sys_reset_n : in  std_logic;
	 rd_data 	 : in  std_logic_vector(31 downto 0);
	 wr_busy 	 : in  std_logic;          
	 pci_exp_txp : out std_logic;
	 pci_exp_txn : out std_logic;
	 clk 			 : out std_logic;
	 rst_n 		 : out std_logic;
	 rd_addr 	 : out std_logic_vector(31 downto 0);
	 rd_be 		 : out std_logic_vector(3 downto 0);
	 rd_en		 : out std_logic;
	 wr_be 		 : out std_logic_vector(7 downto 0);
	 wr_data 	 : out std_logic_vector(31 downto 0);
	 wr_en 		 : out std_logic
  );
end component;

component MODE_BASED_PIN_SEL_MUX is
    port ( 
		clk_50mhz			: in   std_logic;
		clk_10mhz			: in   std_logic;
		reset					: in   std_logic;
		ttl_in 				: in   std_logic_vector (39 downto 1);
      ttl_out 				: out  std_logic_vector (39 downto 1);
      ttl_dir_cntrl 		: out  std_logic_vector (39 downto 1);
		UART_GRP_SEL		: IN 	 STD_LOGIC_VECTOR (77 downto 0);
 
		PULSE_GRP_SEL		: IN 	 STD_LOGIC_VECTOR (3 downto 0);
 
		UART_TX				: IN	 STD_LOGIC_VECTOR(38 DOWNTO 0);
		UART_DIR_CTRL		: IN	 STD_LOGIC_VECTOR(38 DOWNTO 0);
		UART_RX				: OUT	 STD_LOGIC_VECTOR(38 DOWNTO 0);
 
		PULSE_OUT			: IN	 STD_LOGIC_VECTOR(1 	DOWNTO 0);
		PULSE_DIR_CTRL		: IN	 STD_LOGIC_VECTOR(1 	DOWNTO 0);
		PULSE_IN				: OUT	 STD_LOGIC_VECTOR(1 	DOWNTO 0);
		GPIO_IN				: OUT	 STD_LOGIC_VECTOR(38 DOWNTO 0);
		GPIO_DIR_CTRL		: IN	 STD_LOGIC_VECTOR(38 DOWNTO 0);
		GPIO_OUT				: IN	 STD_LOGIC_VECTOR(38 DOWNTO 0)
		);

end component;
	
	

	COMPONENT UART_INTERFACE
port ( 
	reset 			: in  std_logic;
	pci_clk 			: in  std_logic;
   clk 				: in  std_logic;
	out_ctrl			: out	std_logic;
   tx_en 			: in  std_logic;
	rx_en 			: in  std_logic;
	parity_en 		: in  std_logic;								--'1' - Enabled	'0' -Disabled
	prty_odd_evn	: in  std_logic;								--'1' - Odd Parity	'0' -Even Parity
	bit_8_16_sel	: in  std_logic;								--'1' - 16 bits	'0' -8bits
	tx_fifo_rst		: in  std_logic;
	rx_fifo_rst		: in  std_logic;
	duplex_sel		: in	std_logic;								--'1' - Full Duplex '0' - Half Duplex
	tx_rx_sel		: in	std_logic;								--'1' - Tx Mode	'0' - Rx Mode
   tx_data_in 		: in  std_logic_vector (15 downto 0);
	baud_count 		: in  std_logic_vector (19 downto 0);
	rx_uart_in		: in  std_logic;
   tx_uart_out 	: out std_logic;
   tx_busy 			: out std_logic;
	rx_busy 			: out std_logic;
	TEST_TX_WR_DATA_CNT 	: out std_logic_vector (9 downto 0);
	rx_fifo_cnt 	: out std_logic_vector (9 downto 0);
	tx_fifo_cnt 	: out std_logic_vector (9 downto 0);
   rx_data_out 	: out std_logic_vector (16 downto 0)
	);
	END COMPONENT;


	
	COMPONENT TRP_PULSE_MACRO IS
	PORT(
			CLK 			: IN 	STD_LOGIC;
			RST			: IN 	STD_LOGIC;
			EN				: IN 	STD_LOGIC;
			ON_TIME		: IN 	STD_LOGIC_VECTOR(31 DOWNTO 0);
			TOTAL_TIME	: IN 	STD_LOGIC_VECTOR(31 DOWNTO 0);
			PULSE_COUNT	: IN 	STD_LOGIC_VECTOR(31 DOWNTO 0);
			PULSE_OUT	: OUT STD_LOGIC
			);
	END COMPONENT;
	
	COMPONENT gpio_test is
	port(
		clock 	: in std_logic;
		reset 	: in std_logic;
		gpio_en 	: in std_logic;
		gpio_mux	: in std_logic;
		
		gpio_in 			: in std_logic;
		pulse_count_i	: in std_logic_vector(31 downto 0);
		on_count_i		: in std_logic_vector(31 downto 0);
		off_count_i		: in std_logic_vector(31 downto 0);
			
		gpio_out 		: out std_logic;
		pulse_count_o	: out std_logic_vector(31 downto 0);
		on_count_o		: out std_logic_vector(31 downto 0);
		TOTAL_count_o	: out std_logic_vector(31 downto 0);
		off_count_o		: out std_logic_vector(31 downto 0)
		);
	end COMPONENT;
	



----------- CLOCK SIGNALS -------------------
SIGNAL CLK_250MHz,CLK_50MHz,CLK_10MHz				: STD_LOGIC;
SIGNAL CLK_100MHz,CLK_20MHz,CLK_62P5MHZ_PCI		: STD_LOGIC;
SIGNAL CLK_75MHz,CLK_37p5MHz,CLK_18p75MHz,CLK_9p375MHz	: STD_LOGIC;
SIGNAL CLK_12p8MHz,CLK_1600KHz,CLK_400KHz			: STD_LOGIC;
SIGNAL CLK_CNT 											: STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL CLK_CNT1 											: STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL CLK_CNT2 											: STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL RST_CNT 											: STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL CLK_312p5KHz										: STD_LOGIC;




SIGNAL sftwr_rst				: STD_LOGIC := '0';

------------- PCI SIGNALS ------------------
signal RESET										: STD_LOGIC := '0';
signal pci_rst										: STD_LOGIC := '0';
signal pci_rst_n									: STD_LOGIC := '0';
signal PCIE_WREN									: STD_LOGIC := '0';
signal PCIE_RDEN									: STD_LOGIC := '0';
signal PCIE_MUX_RDDATA							: STD_LOGIC_VECTOR(31 DOWNTO 0);
--signal PCIE_WR_DATA								: STD_LOGIC_VECTOR(31 DOWNTO 0);

---------------- BASE GEN REGISTER SIGNALS -----------
	SIGNAL	UART_RX_IN					: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_TX_OUT					: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_DIR_CNTRL				: STD_LOGIC_VECTOR(38 DOWNTO 0);	--:= X"33";


	SIGNAL	WR_EN,RD_EN										: STD_LOGIC;
	SIGNAL	BASE0,BASE1,BASE2,BASE3,BASE4				: STD_LOGIC;	
	SIGNAL	BASE5,BASE6,BASE7								: STD_LOGIC;	
	SIGNAL	BASE0_WR,BASE1_WR,BASE3_WR,BASE4_WR		: STD_LOGIC;	--,BASE2_WR
	SIGNAL	BASE0_RD,BASE3_RD,BASE4_RD					: STD_LOGIC;	
	SIGNAL	BASE1_RD,BASE2_RD								: STD_LOGIC;
	SIGNAL	BASE5_RD,BASE5_WR								: STD_LOGIC;
	SIGNAL	BASE6_RD,BASE6_WR								: STD_LOGIC;
	SIGNAL	BASE7_RD,BASE7_WR								: STD_LOGIC;
	SIGNAL	RX_ADDRESS										: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL	RD_DATA,RD_DATA_SWAPED						: STD_LOGIC_VECTOR (31 DOWNTO 0);
   SIGNAL	WR_DATA,PCIE_WR_DATA							: STD_LOGIC_VECTOR (31 DOWNTO 0);

	SIGNAL 	READMUX1						: STD_LOGIC_VECTOR (31 DOWNTO 0); 
	SIGNAL 	READMUX2						: STD_LOGIC_VECTOR (31 DOWNTO 0); 
	SIGNAL 	READMUX3						: STD_LOGIC_VECTOR (31 DOWNTO 0); 
	SIGNAL 	READMUX4						: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX5						: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX6						: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX7						: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX8						: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX9						: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX10					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX11					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX12					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX13					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX14					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX15					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX16					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX17					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX18					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX19					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX20					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX21					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX22					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX23					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX24					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	
	SIGNAL 	READMUX13_1					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX13_2					: STD_LOGIC_VECTOR (31 DOWNTO 0);


	SIGNAL 	READMUX1_1					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	SIGNAL 	READMUX1_2					: STD_LOGIC_VECTOR (31 DOWNTO 0);

	SIGNAL 	READMUX1_RD_EN				: STD_LOGIC;	
	SIGNAL 	READMUX2_RD_EN				: STD_LOGIC;
	SIGNAL 	READMUX3_RD_EN				: STD_LOGIC;
	SIGNAL 	READMUX4_RD_EN				: STD_LOGIC;
	SIGNAL 	READMUX5_RD_EN				: STD_LOGIC;
	SIGNAL 	READMUX6_RD_EN				: STD_LOGIC;
	SIGNAL 	READMUX7_RD_EN				: STD_LOGIC;
	SIGNAL 	READMUX8_RD_EN				: STD_LOGIC;
	SIGNAL 	READMUX9_RD_EN				: STD_LOGIC;
	SIGNAL 	READMUX10_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX11_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX12_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX13_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX14_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX15_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX16_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX17_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX18_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX19_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX20_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX21_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX22_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX23_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX24_RD_EN			: STD_LOGIC;

	SIGNAL 	READMUX13_1_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX13_2_RD_EN			: STD_LOGIC;
	

	SIGNAL 	READMUX1_1_RD_EN			: STD_LOGIC;
	SIGNAL 	READMUX1_2_RD_EN			: STD_LOGIC;
	
	
			--REGISTERS
	SIGNAL	SCRATCHPAD					: STD_LOGIC_VECTOR (31 DOWNTO 0);
	
	
			-- GROUP BASED MODE REGISTERS
	SIGNAL	G1_MODE						: STD_LOGIC_VECTOR (1 DOWNTO 0);
	SIGNAL	G2_MODE						: STD_LOGIC_VECTOR (1 DOWNTO 0);
	SIGNAL	G3_MODE						: STD_LOGIC_VECTOR (1 DOWNTO 0);
	SIGNAL	G4_MODE						: STD_LOGIC_VECTOR (1 DOWNTO 0);
	SIGNAL	G5_MODE						: STD_LOGIC_VECTOR (1 DOWNTO 0);
	SIGNAL	G6_MODE						: STD_LOGIC_VECTOR (1 DOWNTO 0);
	SIGNAL	G7_MODE						: STD_LOGIC_VECTOR (1 DOWNTO 0);
	SIGNAL	G8_MODE						: STD_LOGIC_VECTOR (1 DOWNTO 0);
	
	
			-- GPIO REGISTERS
	SIGNAL	GPIO_DATA					: STD_LOGIC_VECTOR (38 DOWNTO 0);
	SIGNAL	GPIO_CNTRL					: STD_LOGIC_VECTOR (38 DOWNTO 0);
	SIGNAL	GPIO_STS						: STD_LOGIC_VECTOR (38 DOWNTO 0);
	
	
			-- UART REGISTERS
	TYPE		ARRAY_14_16			IS ARRAY (38 DOWNTO 0) OF STD_LOGIC_VECTOR (15 DOWNTO 0);		
	TYPE		ARRAY_14_17			IS ARRAY (38 DOWNTO 0) OF STD_LOGIC_VECTOR (16 DOWNTO 0);
	TYPE		ARRAY_14_20			IS ARRAY (38 DOWNTO 0) OF STD_LOGIC_VECTOR (19 DOWNTO 0);
	TYPE		ARRAY_14_9			IS ARRAY (38 DOWNTO 0) OF STD_LOGIC_VECTOR (8 DOWNTO 0);
	TYPE		ARRAY_14_10			IS ARRAY (38 DOWNTO 0) OF STD_LOGIC_VECTOR (9 DOWNTO 0);
	SIGNAL	UART_WR_DATA 								: ARRAY_14_16;
	SIGNAL	UART_RD_DATA 								: ARRAY_14_17;
	SIGNAL	UART_BAUD_CNT 								: ARRAY_14_20;
	SIGNAL	UART_CNTRL 									: ARRAY_14_9;
	SIGNAL	UART_TX_FIFO_CNT 							: ARRAY_14_10;
	SIGNAL	UART_RX_FIFO_CNT 							: ARRAY_14_10;
	SIGNAL	TEST_TX_WR_DATA_CNT 							: ARRAY_14_10;
	
	
			----------- TRP SOB CLK SYSREF ARRAY  ---------------
--	TYPE		ARRAY_12_32			IS ARRAY (11 DOWNTO 0) OF STD_LOGIC_VECTOR (31 DOWNTO 0);
--	SIGNAL	ON_TIME, TOTAL_TIME, PULSE_COUNT 	: ARRAY_12_32;
--	SIGNAL	ON_TIME_IN, TOTAL_TIME_IN, PULSE_COUNT_IN 	: ARRAY_12_32;



			--REGISTERS READ ENABLE
	SIGNAL	BRDID_RD						: STD_LOGIC;		
	SIGNAL	BRDVERSION_RD				: STD_LOGIC;
	SIGNAL	TYPID_FPGAVER_RD			: STD_LOGIC;
	SIGNAL	SCRATCHPAD_RD				: STD_LOGIC;

	SIGNAL	UART_GRP_SEL_RD			: STD_LOGIC;

	SIGNAL	PULSE_GRP_SEL_RD			: STD_LOGIC;
--
	SIGNAL	GPIO_LSB_DATA_RD			: STD_LOGIC;
	SIGNAL	GPIO_MSB_DATA_RD			: STD_LOGIC;
	SIGNAL	GPIO_LSB_CNTRL_RD			: STD_LOGIC;
	SIGNAL	GPIO_MSB_CNTRL_RD			: STD_LOGIC;
	SIGNAL	GPIO_LSB_STS_RD			: STD_LOGIC;
	SIGNAL	GPIO_MSB_STS_RD			: STD_LOGIC;

	SIGNAL	UART_WR_DATA_RD 			: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_RD_DATA_RD 			: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_BAUD_CNT_RD 			: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_CNTRL_RD 				: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_TX_FIFO_CNT_RD 		: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_RX_FIFO_CNT_RD 		: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	TEST_TX_WR_DATA_CNT_RD 		: STD_LOGIC_VECTOR(38 DOWNTO 0);
		
			--REGISTERS WRITE ENABLE
	SIGNAL	SFTWR_RST_WR				: STD_LOGIC;
	SIGNAL	SCRATCHPAD_WR				: STD_LOGIC;

	SIGNAL 	UART_GRP_SEL_WR			: STD_LOGIC;
	
	SIGNAL	PULSE_GRP_SEL_WR			: STD_LOGIC;


	SIGNAL	GPIO_LSB_DATA_WR			: STD_LOGIC;
	SIGNAL	GPIO_MSB_DATA_WR			: STD_LOGIC;
	SIGNAL	GPIO_LSB_CNTRL_WR			: STD_LOGIC;
	SIGNAL	GPIO_MSB_CNTRL_WR			: STD_LOGIC;

	SIGNAL	UART_WR_DATA_WR 			: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_BAUD_CNT_WR 			: STD_LOGIC_VECTOR(38 DOWNTO 0);
	SIGNAL	UART_CNTRL_WR 				: STD_LOGIC_VECTOR(38 DOWNTO 0);
		

------------------------------- TRP SOB CLK SYSREF SIGNALS --------------------	
--	SIGNAL ON_TIME_REG,TOTAL_TIME_REG,PULSE_COUNT_REG	: STD_LOGIC_VECTOR(31 DOWNTO 0);
--	SIGNAL INPUT_CHN_SEL_REG,PULSE_DIR_CTRL				: STD_LOGIC_VECTOR(11 DOWNTO 0);
--	
--	SIGNAL ON_TIME_IN_REG,TOTAL_TIME_IN_REG,PULSE_COUNT_IN_REG	: STD_LOGIC_VECTOR(31 DOWNTO 0);
--	SIGNAL WR_SEL_REG	: STD_LOGIC_VECTOR(11 DOWNTO 0);
--	
--	SIGNAL ON_TIME_REG_WR,TOTAL_TIME_REG_WR,PULSE_COUNT_REG_WR	: STD_LOGIC;
--	SIGNAL WR_SEL_REG_WR,RD_SEL_REG_WR									: STD_LOGIC;
--
--	SIGNAL ON_TIME_REG_RD,TOTAL_TIME_REG_RD,PULSE_COUNT_REG_RD	: STD_LOGIC;
--	SIGNAL WR_SEL_REG_RD,RD_SEL_REG_RD									: STD_LOGIC;
--
--	SIGNAL INPUT_CHN_SEL_REG_WR, INPUT_CHN_SEL_REG_RD							: STD_LOGIC;
--	SIGNAL PULSE_DIR_CTRL_WR, PULSE_DIR_CTRL_RD							: STD_LOGIC;
--	SIGNAL ON_TIME_IN_REG_RD, TOTAL_TIME_IN_REG_RD,PULSE_COUNT_IN_REG_RD : STD_LOGIC;
--	
--	SIGNAL OUTPUT_EN_WR,OUTPUT_EN_RD											: STD_LOGIC;
--	SIGNAL OUTPUT_EN													: STD_LOGIC_VECTOR(11 DOWNTO 0);	
--	SIGNAL INPUT_EN													: STD_LOGIC_VECTOR(11 DOWNTO 0);	

	TYPE		ARRAY_12_32			IS ARRAY (11 DOWNTO 0) OF STD_LOGIC_VECTOR (31 DOWNTO 0);		

	SIGNAL ON_TIME_OUT,TOTAL_TIME_OUT,PULSE_COUNT_OUT				: ARRAY_12_32;
	SIGNAL ON_TIME_IN,TOTAL_TIME_IN,PULSE_COUNT_IN					: ARRAY_12_32;
	SIGNAL PULSE_OUT_EN														: STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL PULSE_IN_RESET													: STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL PULSE_DIR_CTRL													: STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL ON_TIME_OUT_WR,TOTAL_TIME_OUT_WR,PULSE_COUNT_OUT_WR	: STD_LOGIC_VECTOR(11 DOWNTO 0);
	SIGNAL ON_TIME_OUT_RD,TOTAL_TIME_OUT_RD,PULSE_COUNT_OUT_RD	: STD_LOGIC_VECTOR(11 DOWNTO 0);
	SIGNAL ON_TIME_IN_RD,TOTAL_TIME_IN_RD,PULSE_COUNT_IN_RD		: STD_LOGIC_VECTOR(11 DOWNTO 0);
	SIGNAL PULSE_COUNT_IN_RD_FALL,PULSE_COUNT_IN_RD_FALL_D2_LONG: STD_LOGIC_VECTOR(11 DOWNTO 0);
	SIGNAL PULSE_COUNT_IN_RD_FALL_D1,PULSE_COUNT_IN_RD_FALL_D2	: STD_LOGIC_VECTOR(11 DOWNTO 0);
	
	SIGNAL PULSE_CLK10_SEL,PULSE_CLK11_SEL			: STD_LOGIC_VECTOR(2 DOWNTO 0);
	SIGNAL PULSE_CLK10_SEL_WR,PULSE_CLK11_SEL_WR	: STD_LOGIC;
	SIGNAL PULSE_CLK10_SEL_RD,PULSE_CLK11_SEL_RD	: STD_LOGIC;
	
	SIGNAL PULSE_CLK10,PULSE_CLK11			: STD_LOGIC;
	
	SIGNAL PULSE_DIR_CTRL_RD,PULSE_DIR_CTRL_WR			: STD_LOGIC;
	SIGNAL PULSE_IN_RESET_RD,PULSE_IN_RESET_WR			: STD_LOGIC;
	SIGNAL PULSE_OUT_EN_RD,PULSE_OUT_EN_WR					: STD_LOGIC;
	SIGNAL PULSE_OUT_EN_WR_LONG								: STD_LOGIC;
	SIGNAL PULSE_DIR_CTRL_WR_LONG								: STD_LOGIC;

	SIGNAL PULSE_OUT			: STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL PULSE_IN			: STD_LOGIC_VECTOR(1 DOWNTO 0);
	
	SIGNAL FREQ_COUNT_CLK1,FREQ_COUNT_CLK2			: STD_LOGIC_VECTOR(15 DOWNTO 0);
	SIGNAL FREQ_COUNT_CLK1_RD,FREQ_COUNT_CLK2_RD	: STD_LOGIC;
	
----------------- GPIO SIGNALS ---------------
	SIGNAL GPIO_OUT,GPIO_DIR_CTRL,GPIO_IN			: STD_LOGIC_VECTOR(38 DOWNTO 0);
	
----------------- FPGA MODE SELECTION ------------
	SIGNAL GPIO_GRP_SEL 		: STD_LOGIC_VECTOR (78 DOWNTO 0); ---//CHANGE_MD
	SIGNAL UART_GRP_SEL		: STD_LOGIC_VECTOR (78 downto 0); ---//CHANGE_MD
--	SIGNAL SPI_GRP_SEL		: STD_LOGIC_VECTOR (3 downto 0);
--	SIGNAL I2C_GRP_SEL		: STD_LOGIC_VECTOR (7 downto 0);
	SIGNAL PULSE_GRP_SEL		: STD_LOGIC_VECTOR (3 downto 0); ---//CHANGE_MD
	
------------- I2C SIGNALS ---------------------------	
--	SIGNAL SDA_IOBUF_T_0,SDA_IOBUF_T_1	: STD_LOGIC;
--	SIGNAL SDA_OUT_2,SDA_OUT_3				: STD_LOGIC;
--	SIGNAL SCL_IOBUF_T_0,SCL_IOBUF_T_1	: STD_LOGIC;

	

	

attribute MARK_DEBUG : STRING;
attribute MARK_DEBUG of READMUX1_1_RD_EN,READMUX1_RD_EN,READMUX2_RD_EN,READMUX3_RD_EN,READMUX4_RD_EN,
			READMUX5_RD_EN,READMUX6_RD_EN,READMUX7_RD_EN	, READMUX8_RD_EN,WR_EN,WR_DATA,RD_DATA_SWAPED, BASE0,	BASE1,
			BASE2, BASE3,RD_EN,SCRATCHPAD,SCRATCHPAD_WR,SCRATCHPAD_RD,rx_address,
			BASE0_WR,BASE0_RD,BASE1_WR,BASE1_RD,BASE2_RD,BASE3_WR,BASE3_RD,CLK_250MHz,
			PULSE_IN : signal is "TRUE";

begin

U1_PCIe_INTERFACE: xilinx_pcie_1_1_ep_s6 
	port map(
		pci_exp_txp => XMC_TXP0,
		pci_exp_txn => XMC_TXN0,
		pci_exp_rxp => XMC_RXP0,
		pci_exp_rxn => XMC_RXN0,
		sys_clk_p 	=> XMC_REFCLKP_C,
		sys_clk_n 	=> XMC_REFCLKN_C,
		sys_reset_n => '1',
		clk 			=> CLK_62P5MHZ_PCI,
		rst_n 		=> pci_rst,
		rd_addr 		=> RX_ADDRESS,
		rd_be 		=> open,
		rd_en			=> RD_EN,
		rd_data 		=> RD_DATA_SWAPED,
		wr_be 		=> open,
		wr_data 		=> PCIE_WR_DATA,
		wr_en 		=> WR_EN,
		wr_busy 		=> '0'
	);

	pci_rst_n <= not pci_rst;
	sftwr_rst	<= pci_rst_n OR SFTWR_RST_WR;
	
--GEN_I2C_EN_GEN	: FOR I IN 0 TO 3 GENERATE
--	I2C_EN_GEN	: PUL_INC
--	PORT MAP(
--		CLK_IN	=> CLK_62P5MHZ_PCI,
--		CLK_OUT	=>	CLK_312p5KHz,
--		PUL_IN	=> I2C_WR_DATA_WR(I),
--		PUL_OUT	=>	I2C_WR_DATA_WR_LONG(I)
--		);
--END GENERATE GEN_I2C_EN_GEN;

	PULSE_TEST_EN_GEN	: PUL_INC
	PORT MAP(
		CLK_IN	=> CLK_62P5MHZ_PCI,
		CLK_OUT	=>	CLK_20MHz,
		PUL_IN	=> PULSE_OUT_EN_WR,
		PUL_OUT	=>	PULSE_OUT_EN_WR_LONG
		);

	
--PULSE_TEST_RESET_GEN: 	FOR I IN 0 TO 9 GENERATE
--	RESET_GEN_PULSE_TEST	: PUL_INC
--	PORT MAP(
--		CLK_IN	=> CLK_62P5MHZ_PCI,
--		CLK_OUT	=>	CLK_20MHz,
--		PUL_IN	=> PULSE_COUNT_IN_RD_FALL_D2(I),
--		PUL_OUT	=>	PULSE_COUNT_IN_RD_FALL_D2_LONG(I)
--		);
--END GENERATE PULSE_TEST_RESET_GEN;
	
	U2_clock_reset: clock_reset 
	 PORT MAP(
		clk_62p5mhz  			=> CLK_62P5MHZ_PCI,
		sftwr_rst 	 			=> sftwr_rst,
		CLK_250MHz	 			=> CLK_250MHz,
		CLK_50MHz		 		=> CLK_50MHz,
		CLK_10MHz	 			=> CLK_10MHz,
		CLK_100MHz	 			=> CLK_100MHz,
		CLK_20MHz	 			=> CLK_20MHz,
		CLK_12p8MHz	 			=> CLK_12p8MHz,
		l_rst 		 			=> RESET
	 );


MODE_SEL	:	MODE_BASED_PIN_SEL_MUX
PORT MAP(
	clk_50mhz				=>	CLK_50MHZ,
	clk_10mhz				=>	CLK_10MHZ,
	reset						=>	RESET,
	ttl_in					=>	TTL_IN,
	ttl_out					=> TTL_OUT_F,
	ttl_dir_cntrl			=>	TTL_OUT_EN,
	UART_GRP_SEL			=>	UART_GRP_SEL,

	PULSE_GRP_SEL			=>	PULSE_GRP_SEL,

	UART_TX					=> UART_TX_OUT,
	UART_DIR_CTRL			=> UART_DIR_CNTRL,
	UART_RX					=> UART_RX_IN,
	
	PULSE_OUT				=>	PULSE_OUT,
	PULSE_DIR_CTRL			=> PULSE_DIR_CTRL,
	PULSE_IN					=> PULSE_IN,
	GPIO_IN					=> GPIO_IN,
	GPIO_DIR_CTRL			=> GPIO_DIR_CTRL,
	GPIO_OUT					=> GPIO_OUT
	);
	
	

	


	GEN_UART_INTERFACE: FOR I IN 0 TO 38 GENERATE
		U4_UART_INTERFACE: UART_INTERFACE 
		PORT MAP(
			RESET 			=> RESET,
			PCI_CLK 			=> CLK_62P5MHZ_PCI,
			CLK 				=> CLK_50MHZ,
			OUT_CTRL			=> UART_DIR_CNTRL(I),
			TX_EN 			=> UART_WR_DATA_WR(I),
			RX_EN 			=> UART_RD_DATA_RD(I),
			PARITY_EN 		=> '0',
			PRTY_ODD_EVN 	=> UART_CNTRL(I)(3),
			BIT_8_16_SEL 	=> '0',
			TX_FIFO_RST 	=> UART_CNTRL(I)(4),
			RX_FIFO_RST 	=> UART_CNTRL(I)(5),
			DUPLEX_SEL 		=> '0',
			TX_RX_SEL 		=> UART_CNTRL(I)(1),
			TX_DATA_IN 		=> UART_WR_DATA(I),
			BAUD_COUNT 		=> UART_BAUD_CNT(I),
			RX_UART_IN 		=> UART_RX_IN(I),
			TX_UART_OUT 	=> UART_TX_OUT(I),
			TX_BUSY 			=> UART_CNTRL(I)(6),
			RX_BUSY 			=> UART_CNTRL(I)(7),
			TEST_TX_WR_DATA_CNT 	=> TEST_TX_WR_DATA_CNT(I),
			RX_FIFO_CNT 	=> UART_RX_FIFO_CNT(I),
			TX_FIFO_CNT 	=> UART_TX_FIFO_CNT(I),
			RX_DATA_OUT 	=> UART_RD_DATA(I)
		);
	END GENERATE GEN_UART_INTERFACE;
	
	
	

	GEN_TRP_SOB_CLK_SYSREF_GEN: FOR I IN 0 TO 1 GENERATE
	TRP_SOB_CLK_SYSREF_GEN : 	TRP_PULSE_MACRO	
	PORT MAP(									
		CLK 				=> CLK_100MHz,
		RST 				=> RESET,
		EN 				=> PULSE_OUT_EN(I),
		ON_TIME 			=> ON_TIME_OUT(I),
		TOTAL_TIME 		=> TOTAL_TIME_OUT(I),
		PULSE_COUNT 	=> PULSE_COUNT_OUT(I),
		PULSE_OUT 		=> PULSE_OUT(I)
		);
	END GENERATE GEN_TRP_SOB_CLK_SYSREF_GEN;
	
	
	
	
	
	GEN_TRP_SOB_CLK_SYSREF_TEST : FOR I IN 0 TO 1 GENERATE
	TRP_SOB_CLK_SYSREF_TEST : gpio_test			-- TO MEASURE THE PARAMETER OF INPUT PULSE AND CLK SIGNALS
	PORT MAP(
		clock 			=> CLK_100MHz,
		reset				=> RESET OR PULSE_IN_RESET(I),
		gpio_en 			=> NOT PULSE_DIR_CTRL(I) AND PULSE_OUT_EN_WR_LONG ,
		gpio_mux 		=> '0',
		gpio_in			=> PULSE_IN(I),
		pulse_count_i 	=> (OTHERS =>'0'),
		on_count_i		=> (OTHERS =>'0'),
		off_count_i		=> (OTHERS =>'0'),
		gpio_out			=> OPEN,
		pulse_count_o	=> PULSE_COUNT_IN(I),
		on_count_o		=>	ON_TIME_IN(I),
		TOTAL_count_o	=> TOTAL_TIME_IN(I),
		off_count_o		=> OPEN
		);
	END GENERATE GEN_TRP_SOB_CLK_SYSREF_TEST;
	
	
--	CLK_CH1_TEST	: freq_counter
--	PORT MAP(
--		clock				=> CLK_20MHz,
--		reset				=> RESET OR PULSE_DIR_CTRL(10),
--		gpio_i			=>	PULSE_IN(10),	
--		freq_count		=> FREQ_COUNT_CLK1
--		);
--
--	CLK_CH2_TEST	: freq_counter
--	PORT MAP(
--		clock				=> CLK_20MHz,
--		reset				=> RESET OR PULSE_DIR_CTRL(11),
--		gpio_i			=>	PULSE_IN(11),	
--		freq_count		=> FREQ_COUNT_CLK2
--		);

		
	
	GPIO_OUT				<= GPIO_DATA;
	GPIO_DIR_CTRL		<= GPIO_CNTRL;
	GPIO_STS				<= GPIO_IN;
	
--------------------- REGISTERS -----------------------
	BASE0		<= '1' WHEN RX_ADDRESS(10 DOWNTO 8) = "000" ELSE '0';
	BASE1		<= '1' WHEN RX_ADDRESS(10 DOWNTO 8) = "001" ELSE '0';
	BASE2		<= '1' WHEN RX_ADDRESS(10 DOWNTO 8) = "010" ELSE '0';
	BASE3		<= '1' WHEN RX_ADDRESS(10 DOWNTO 8) = "011" ELSE '0';
	BASE4		<= '1' WHEN RX_ADDRESS(10 DOWNTO 8) = "100" ELSE '0';
	BASE5		<= '1' WHEN RX_ADDRESS(10 DOWNTO 8) = "101" ELSE '0';
	BASE6		<= '1' WHEN RX_ADDRESS(10 DOWNTO 8) = "110" ELSE '0';
	BASE7		<= '1' WHEN RX_ADDRESS(10 DOWNTO 8) = "111" ELSE '0';
	
	BASE0_WR <= BASE0 AND WR_EN;
	BASE0_RD <= BASE0 AND RD_EN;
	BASE1_WR <= BASE1 AND WR_EN;
	BASE1_RD <= BASE1 AND RD_EN;
	BASE2_RD <= BASE2 AND RD_EN;
	BASE3_RD <= BASE3 AND RD_EN;
	BASE3_WR <= BASE3 AND WR_EN;
	BASE4_RD <= BASE4 AND RD_EN;
	BASE4_WR <= BASE4 AND WR_EN;
	BASE5_RD <= BASE5 AND RD_EN;
	BASE5_WR <= BASE5 AND WR_EN;
	BASE6_RD <= BASE6 AND RD_EN;
	BASE6_WR <= BASE6 AND WR_EN;
	BASE7_RD <= BASE7 AND RD_EN;
	BASE7_WR <= BASE7 AND WR_EN;
	
	--READ DECODER
	BRDID_RD						<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	BRDVERSION_RD				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"04"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	TYPID_FPGAVER_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"08"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	SCRATCHPAD_RD				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"0C"  AND  BASE0_RD = '1'  ) ELSE '0' ;	
	
	GPIO_LSB_DATA_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F0"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	GPIO_MSB_DATA_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F4"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	GPIO_LSB_CNTRL_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F8"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	GPIO_MSB_CNTRL_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"FC"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	GPIO_LSB_STS_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE2_RD = '1'  ) ELSE '0' ;
	GPIO_MSB_STS_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"04"  AND  BASE2_RD = '1'  ) ELSE '0' ;
	
	UART_GRP_SEL_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"14"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	PULSE_GRP_SEL_MID_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"20"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	PULSE_GRP_SEL_END_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"20"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	PULSE_GRP_SEL_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"20"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	
	
	
	UART_WR_DATA_RD(0) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"40"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(0) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"44"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(0) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"48"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(0) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"4C"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(0)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"50"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(0)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"54"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(0)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"58"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_WR_DATA_RD(1) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(1) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(1) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(1) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(1)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(1)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(1)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_WR_DATA_RD(2) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"80"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(2) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"84"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(2) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"88"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(2) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"8C"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(2)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"90"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(2)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"94"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(2)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"98"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_WR_DATA_RD(3) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A0"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(3) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A4"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(3) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A8"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(3) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"AC"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(3)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"B0"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(3)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"B4"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(3)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"B8"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_WR_DATA_RD(4) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"C0"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(4) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"C4"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(4) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"C8"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(4) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"CC"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(4)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"D0"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(4)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"D4"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(4)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"D8"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_WR_DATA_RD(5) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"E0"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(5) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"E4"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(5) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"E8"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(5) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"EC"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(5)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F0"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(5)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F4"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(5)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F8"  AND  BASE0_RD = '1'  ) ELSE '0' ;
	UART_WR_DATA_RD(6) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(6) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"04"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(6) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"08"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(6) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"0C"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(6)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"10"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(6)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"14"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(6)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"18"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_WR_DATA_RD(7) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"20"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(7) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"24"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(7) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"28"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(7) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"2C"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(7)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"30"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(7)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"34"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(7)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"38"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(8) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"40"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(8) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"44"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(8) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"48"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(8) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"4C"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(8)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"50"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(8)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"54"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(8)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"58"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(9) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(9) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(9) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(9) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(9)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(9)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(9)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE1_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(10) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(10) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"04"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(10) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"08"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(10) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"0C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(10)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"10"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(10)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"14"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(10)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"18"  AND  BASE4_RD = '1'  ) ELSE '0';

	UART_WR_DATA_RD(11) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"20"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(11) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"24"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(11) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"28"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(11) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"2C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(11)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"30"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(11)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"34"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(11)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"38"  AND  BASE4_RD = '1'  ) ELSE '0' ;

	UART_WR_DATA_RD(12) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"40"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(12) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"44"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(12) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"48"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(12) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"4C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(12)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"50"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(12)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"54"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(12)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"58"  AND  BASE4_RD = '1'  ) ELSE '0' ;

	UART_WR_DATA_RD(13) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(13) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(13) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(13) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(13)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(13)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(13)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	-----
	UART_WR_DATA_RD(14) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(14) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(14) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(14) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(14)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(14)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(14)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(15) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(15) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(15) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(15) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(15)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(15)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(15)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;	
	
	UART_WR_DATA_RD(16) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(16) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(16) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(16) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(16)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(16)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(16)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;	

	UART_WR_DATA_RD(17) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(17) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(17) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(17) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(17)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(17)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(17)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;	

	UART_WR_DATA_RD(18) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(18) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(18) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(18) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(18)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(18)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(18)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;

	UART_WR_DATA_RD(19) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(19) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(19) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(19) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(19)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(19)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(19)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;

	UART_WR_DATA_RD(19) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(19) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(19) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(19) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(19)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(19)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(19)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;	
	
	UART_WR_DATA_RD(20) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(20) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(20) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(20) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(20)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(20)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(20)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(21) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(21) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(21) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(21) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(21)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(21)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(21)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(22) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(22) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(22) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(22) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(22)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(22)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(22)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(23) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(23) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(23) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(23) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(23)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(23)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(23)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(24) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(24) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(24) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(24) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(24)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(24)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(24)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(25) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(25) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(25) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(25) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(25)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(25)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(25)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(26) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(26) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(26) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(26) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(26)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(26)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(26)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(27) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(27) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(27) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(27) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(27)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(27)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(27)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(28) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(28) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(28) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(28) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(28)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(28)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(28)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(29) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(29) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(29) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(29) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(29)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(29)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(29)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(30) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(30) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(30) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(30) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(30)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(30)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(30)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(31) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(31) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(31) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(31) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(31)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(31)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(31)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(32) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(32) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(32) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(32) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(32)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(32)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(32)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(33) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(33) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(33) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(33) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(33)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(33)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(33)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(34) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(34) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(34) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(34) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(34)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(34)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(34)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(35) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(35) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(35) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(35) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(35)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(35)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(35)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	
	UART_WR_DATA_RD(36) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(36) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(36) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(36) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(36)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(36)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(36)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(37) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(37) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(37) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(37) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(37)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(37)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(37)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_RD(38) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RD_DATA_RD(38) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"64"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_RD(38) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_CNTRL_RD(38) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_TX_FIFO_CNT_RD(38)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"70"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	UART_RX_FIFO_CNT_RD(38)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"74"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	TEST_TX_WR_DATA_CNT_RD(38)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"78"  AND  BASE4_RD = '1'  ) ELSE '0' ;
	
	
	
	
	PULSE_IN_RESET_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"0C"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	PULSE_DIR_CTRL_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"1C"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	PULSE_OUT_EN_RD			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"2C"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	
	ON_TIME_OUT_RD(0)			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	TOTAL_TIME_OUT_RD(0)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"04"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	PULSE_COUNT_OUT_RD(0)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"08"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	ON_TIME_OUT_RD(1)			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"10"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	TOTAL_TIME_OUT_RD(1)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"14"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	PULSE_COUNT_OUT_RD(1)	<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"18"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	
	
	

--	PULSE_CLK10_SEL_RD		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A0"  AND  BASE6_RD = '1'  ) ELSE '0' ;
--	PULSE_CLK11_SEL_RD		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A4"  AND  BASE6_RD = '1'  ) ELSE '0' ;
	
	ON_TIME_IN_RD(0)			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE7_RD = '1'  ) ELSE '0' ;
	TOTAL_TIME_IN_RD(0)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"04"  AND  BASE7_RD = '1'  ) ELSE '0' ;
	PULSE_COUNT_IN_RD(0)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"08"  AND  BASE7_RD = '1'  ) ELSE '0' ;
	ON_TIME_IN_RD(1)			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"10"  AND  BASE7_RD = '1'  ) ELSE '0' ;
	TOTAL_TIME_IN_RD(1)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"14"  AND  BASE7_RD = '1'  ) ELSE '0' ;
	PULSE_COUNT_IN_RD(1)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"18"  AND  BASE7_RD = '1'  ) ELSE '0' ;

--	FREQ_COUNT_CLK1_RD		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A0"  AND  BASE7_RD = '1'  ) ELSE '0' ;
--	FREQ_COUNT_CLK2_RD		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"B0"  AND  BASE7_RD = '1'  ) ELSE '0' ;	//Change Made

	
	

	--WRITE DECODER
	SCRATCHPAD_WR				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"0C"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	SFTWR_RST_WR				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"10"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	
	GPIO_LSB_DATA_WR			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F0"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	GPIO_MSB_DATA_WR			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F4"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	GPIO_LSB_CNTRL_WR			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"F8"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	GPIO_MSB_CNTRL_WR			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"FC"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	
	UART_GRP_SEL_WR			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"14"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	PULSE_GRP_SEL_WR			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"20"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	
	
	UART_WR_DATA_WR(0) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"40"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(0) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"48"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(0) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"4C"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_WR_DATA_WR(1) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(1) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(1) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_WR_DATA_WR(2) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"80"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(2) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"88"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(2) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"8C"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_WR_DATA_WR(3) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A0"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(3) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A8"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(3) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"AC"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_WR_DATA_WR(4) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"C0"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(4) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"C8"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(4) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"CC"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_WR_DATA_WR(5) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"E0"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(5) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"E8"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(5) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"EC"  AND  BASE0_WR = '1'  ) ELSE '0' ;
	UART_WR_DATA_WR(6) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(6) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"08"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(6) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"0C"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_WR_DATA_WR(7) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"20"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(7) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"28"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(7) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"2C"  AND  BASE1_WR = '1'  ) ELSE '0' ;

	UART_WR_DATA_WR(8) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"40"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(8) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"48"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(8) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"4C"  AND  BASE1_WR = '1'  ) ELSE '0' ;

	UART_WR_DATA_WR(9) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(9) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(9) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE1_WR = '1'  ) ELSE '0' ;	
	
	UART_WR_DATA_WR(10) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(10) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"08"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(10) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"0C"  AND  BASE4_WR = '1'  ) ELSE '0' ;	
	
	UART_WR_DATA_WR(11) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"20"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(11) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"28"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(11) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"2C"  AND  BASE4_WR = '1'  ) ELSE '0' ;	
	
	UART_WR_DATA_WR(12) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"40"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(12) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"48"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(12) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"4C"  AND  BASE4_WR = '1'  ) ELSE '0' ;	
	
	UART_WR_DATA_WR(13) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(13) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(13) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;	
	
	UART_WR_DATA_WR(14) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(14) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(14) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(15) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(15) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(15) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	
	UART_WR_DATA_WR(16) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(16) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(16) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(17) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(17) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(17) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(18) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(18) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(18) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(19) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(19) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(19) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(20) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(20) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(20) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(21) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(21) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(21) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(22) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(22) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(22) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(23) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(23) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(23) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(24) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(24) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(24) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(25) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(25) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(25) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(26) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(26) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(26) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(27) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(27) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(27) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(28) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(28) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(28) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(29) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(29) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(29) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(30) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(30) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(30) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(31) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(31) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(31) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(32) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(32) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(32) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(33) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(33) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(33) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(34) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(34) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(34) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(35) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(35) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(35) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(36) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(36) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(36) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(37) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(37) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(37) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	UART_WR_DATA_WR(38) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"60"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_BAUD_CNT_WR(38) 		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"68"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	UART_CNTRL_WR(38) 			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"6C"  AND  BASE4_WR = '1'  ) ELSE '0' ;
	
	
	
	
--	SSI_WR_DATA_WR(0)			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"D0"  AND  BASE1_WR = '1'  ) ELSE '0' ;
--	SSI_WR_DATA_WR(1)			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"D8"  AND  BASE1_WR = '1'  ) ELSE '0' ;
--	SSI_CNTRL_WR				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"E0"  AND  BASE1_WR = '1'  ) ELSE '0' ;
	

	

	
	------------------ PULSE WR EN --------------------
	
	PULSE_IN_RESET_WR				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"0C"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	PULSE_DIR_CTRL_WR				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"1C"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	PULSE_OUT_EN_WR				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"2C"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	
	ON_TIME_OUT_WR(0)				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"00"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	TOTAL_TIME_OUT_WR(0)			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"04"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	PULSE_COUNT_OUT_WR(0)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"08"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	ON_TIME_OUT_WR(1)				<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"10"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	TOTAL_TIME_OUT_WR(1)			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"14"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	PULSE_COUNT_OUT_WR(1)		<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"18"  AND  BASE6_WR = '1'  ) ELSE '0' ;	
	
--	PULSE_CLK10_SEL_WR			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A0"  AND  BASE6_WR = '1'  ) ELSE '0' ;
--	PULSE_CLK11_SEL_WR			<= '1' WHEN  (RX_ADDRESS(7 DOWNTO 0) = X"A4"  AND  BASE6_WR = '1'  ) ELSE '0' ;
	
	
	--EAD MUX
	READMUX1				<= X"00005775" 										WHEN ( BRDID_RD 					= '1')		ELSE
								X"00000001"  										WHEN ( BRDVERSION_RD 			= '1')		ELSE
								X"000B0001"		   								WHEN ( TYPID_FPGAVER_RD			= '1')		ELSE
								SCRATCHPAD		   								WHEN ( SCRATCHPAD_RD				= '1')		ELSE
											
								GPIO_DATA(31 DOWNTO 0)							WHEN ( GPIO_LSB_DATA_RD			= '1')		ELSE
--								X"0000"&"00"&GPIO_DATA(45 DOWNTO 32)		WHEN ( GPIO_MSB_DATA_RD			= '1')		ELSE	///c
								GPIO_CNTRL(31 DOWNTO 0)							WHEN ( GPIO_LSB_CNTRL_RD		= '1');		--ELSE
--								X"0000"&"00"&GPIO_CNTRL(45 DOWNTO 32)		WHEN ( GPIO_MSB_CNTRL_RD		= '1');			///c

	
   READMUX2				<= --X"0" & UART_GRP_SEL								WHEN ( UART_GRP_SEL_RD			= '1')		ELSE ///c

								X"0000000"  & PULSE_GRP_SEL							WHEN ( PULSE_GRP_SEL_RD			= '1');	--///c
								

	READMUX3				<= GPIO_STS(31 DOWNTO 0)							WHEN ( GPIO_LSB_STS_RD			= '1')		ELSE
--								X"0000"&"00"& GPIO_STS(45 DOWNTO 32)		WHEN ( GPIO_MSB_STS_RD			= '1')		ELSE ////c
								X"0000"&UART_WR_DATA(0)							WHEN ( UART_WR_DATA_RD(0)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(0)					WHEN ( UART_RD_DATA_RD(0)		= '1')		ELSE
								
								X"000"&UART_BAUD_CNT(0)							WHEN ( UART_BAUD_CNT_RD(0)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(0)					WHEN ( UART_CNTRL_RD(0)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(0)			WHEN ( UART_TX_FIFO_CNT_RD(0)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(0)			WHEN ( UART_RX_FIFO_CNT_RD(0)	= '1')		ELSE
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(0)			WHEN ( TEST_TX_WR_DATA_CNT_RD(0)	= '1');

	READMUX4				<= X"0000"&UART_WR_DATA(1)							WHEN ( UART_WR_DATA_RD(1)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(1)					WHEN ( UART_RD_DATA_RD(1)		= '1')		ELSE
								X"000"&UART_BAUD_CNT(1)							WHEN ( UART_BAUD_CNT_RD(1)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(1)					WHEN ( UART_CNTRL_RD(1)			= '1')		ELSE
								
								X"00000"&"00"&UART_TX_FIFO_CNT(1)			WHEN ( UART_TX_FIFO_CNT_RD(1)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(1)			WHEN ( UART_RX_FIFO_CNT_RD(1)	= '1')		ELSE								
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(1)			WHEN ( TEST_TX_WR_DATA_CNT_RD(1)	= '1')		ELSE								
								X"0000"&UART_WR_DATA(2)							WHEN ( UART_WR_DATA_RD(2)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(2)					WHEN ( UART_RD_DATA_RD(2)		= '1');
								
	READMUX5				<= X"000"&UART_BAUD_CNT(2)							WHEN ( UART_BAUD_CNT_RD(2)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(2)					WHEN ( UART_CNTRL_RD(2)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(2)			WHEN ( UART_TX_FIFO_CNT_RD(2)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(2)			WHEN ( UART_RX_FIFO_CNT_RD(2)	= '1')		ELSE
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(2)			WHEN ( UART_RX_FIFO_CNT_RD(2)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(2)			WHEN ( TEST_TX_WR_DATA_CNT_RD(2)	= '1')		ELSE
								
								X"0000"&UART_WR_DATA(3)							WHEN ( UART_WR_DATA_RD(3)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(3)					WHEN ( UART_RD_DATA_RD(3)		= '1')		ELSE
								X"000"&UART_BAUD_CNT(3)							WHEN ( UART_BAUD_CNT_RD(3)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(3)					WHEN ( UART_CNTRL_RD(3)			= '1');
								
	READMUX6				<= X"00000"&"00"&UART_TX_FIFO_CNT(3)			WHEN ( UART_TX_FIFO_CNT_RD(3)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(3)			WHEN ( UART_RX_FIFO_CNT_RD(3)	= '1')		ELSE
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(3)			WHEN ( TEST_TX_WR_DATA_CNT_RD(3)	= '1')ELSE
								X"0000"&UART_WR_DATA(4)							WHEN ( UART_WR_DATA_RD(4)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(4)					WHEN ( UART_RD_DATA_RD(4)		= '1')		ELSE
								
								X"000"&UART_BAUD_CNT(4)							WHEN ( UART_BAUD_CNT_RD(4)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(4)					WHEN ( UART_CNTRL_RD(4)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(4)			WHEN ( UART_TX_FIFO_CNT_RD(4)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(4)			WHEN ( UART_RX_FIFO_CNT_RD(4)	= '1')		ELSE
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(4)			WHEN ( TEST_TX_WR_DATA_CNT_RD(4)	= '1');
								
	READMUX7				<= X"0000"&UART_WR_DATA(5)							WHEN ( UART_WR_DATA_RD(5)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(5)					WHEN ( UART_RD_DATA_RD(5)		= '1')		ELSE
								X"000"&UART_BAUD_CNT(5)							WHEN ( UART_BAUD_CNT_RD(5)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(5)					WHEN ( UART_CNTRL_RD(5)			= '1')		ELSE
								
								X"00000"&"00"&UART_TX_FIFO_CNT(5)			WHEN ( UART_TX_FIFO_CNT_RD(5)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(5)			WHEN ( UART_RX_FIFO_CNT_RD(5)	= '1')		ELSE
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(5)			WHEN ( TEST_TX_WR_DATA_CNT_RD(5)	= '1')		ELSE
								X"0000"&UART_WR_DATA(6)							WHEN ( UART_WR_DATA_RD(6)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(6)					WHEN ( UART_RD_DATA_RD(6)		= '1');
								
	READMUX8				<= X"000"&UART_BAUD_CNT(6)							WHEN ( UART_BAUD_CNT_RD(6)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(6)					WHEN ( UART_CNTRL_RD(6)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(6)			WHEN ( UART_TX_FIFO_CNT_RD(6)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(6)			WHEN ( UART_RX_FIFO_CNT_RD(6)	= '1')		ELSE
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(6)			WHEN ( TEST_TX_WR_DATA_CNT_RD(6)	= '1')		ELSE
								
								X"0000"&UART_WR_DATA(7)							WHEN ( UART_WR_DATA_RD(7)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(7)					WHEN ( UART_RD_DATA_RD(7)		= '1')		ELSE
								X"000"&UART_BAUD_CNT(7)							WHEN ( UART_BAUD_CNT_RD(7)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(7)					WHEN ( UART_CNTRL_RD(7)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(7)			WHEN ( UART_TX_FIFO_CNT_RD(7)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(7)			WHEN ( UART_RX_FIFO_CNT_RD(7)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(7)			WHEN ( TEST_TX_WR_DATA_CNT_RD(7)	= '1');	


	READMUX9				<= X"0000"&UART_WR_DATA(8)							WHEN ( UART_WR_DATA_RD(8)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(8)					WHEN ( UART_RD_DATA_RD(8)		= '1')		ELSE
								X"000"&UART_BAUD_CNT(8)							WHEN ( UART_BAUD_CNT_RD(8)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(8)					WHEN ( UART_CNTRL_RD(8)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(8)			WHEN ( UART_TX_FIFO_CNT_RD(8)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(8)			WHEN ( UART_RX_FIFO_CNT_RD(8)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(8)			WHEN ( TEST_TX_WR_DATA_CNT_RD(8)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(9)							WHEN ( UART_WR_DATA_RD(9)		= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(9)					WHEN ( UART_RD_DATA_RD(9)		= '1')		ELSE
								X"000"&UART_BAUD_CNT(9)							WHEN ( UART_BAUD_CNT_RD(9)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(9)					WHEN ( UART_CNTRL_RD(9)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(9)			WHEN ( UART_TX_FIFO_CNT_RD(9)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(9)			WHEN ( UART_RX_FIFO_CNT_RD(9)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(9)			WHEN ( TEST_TX_WR_DATA_CNT_RD(9)	= '1');	
								
	READMUX10			<= X"0000"&UART_WR_DATA(10)						WHEN ( UART_WR_DATA_RD(10)			= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(10)					WHEN ( UART_RD_DATA_RD(10)			= '1')		ELSE
								X"000"&UART_BAUD_CNT(10)						WHEN ( UART_BAUD_CNT_RD(10)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(10)					WHEN ( UART_CNTRL_RD(10)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(10)			WHEN ( UART_TX_FIFO_CNT_RD(10)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(10)			WHEN ( UART_RX_FIFO_CNT_RD(10)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(10)			WHEN ( TEST_TX_WR_DATA_CNT_RD(10)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(11)						WHEN ( UART_WR_DATA_RD(11)			= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(11)					WHEN ( UART_RD_DATA_RD(11)			= '1')		ELSE
								X"000"&UART_BAUD_CNT(11)						WHEN ( UART_BAUD_CNT_RD(11)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(11)					WHEN ( UART_CNTRL_RD(11)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(11)			WHEN ( UART_TX_FIFO_CNT_RD(11)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(11)			WHEN ( UART_RX_FIFO_CNT_RD(11)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(11)			WHEN ( TEST_TX_WR_DATA_CNT_RD(11)	= '1');	

	READMUX11			<= X"0000"&UART_WR_DATA(12)						WHEN ( UART_WR_DATA_RD(12)			= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(12)					WHEN ( UART_RD_DATA_RD(12)			= '1')		ELSE
								X"000"&UART_BAUD_CNT(12)						WHEN ( UART_BAUD_CNT_RD(12)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(12)					WHEN ( UART_CNTRL_RD(12)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(12)			WHEN ( UART_TX_FIFO_CNT_RD(12)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(12)			WHEN ( UART_RX_FIFO_CNT_RD(12)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(12)			WHEN ( TEST_TX_WR_DATA_CNT_RD(12)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(13)						WHEN ( UART_WR_DATA_RD(13)			= '1')		ELSE
								X"000"&"000"&UART_RD_DATA(13)					WHEN ( UART_RD_DATA_RD(13)			= '1')		ELSE
								X"000"&UART_BAUD_CNT(13)						WHEN ( UART_BAUD_CNT_RD(13)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(13)					WHEN ( UART_CNTRL_RD(13)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(13)			WHEN ( UART_TX_FIFO_CNT_RD(13)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(13)			WHEN ( UART_RX_FIFO_CNT_RD(13)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(13)			WHEN ( TEST_TX_WR_DATA_CNT_RD(13)	= '1');	



	READMUX12				<= X"0000"&UART_WR_DATA(14)					WHEN ( UART_WR_DATA_RD(14)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(14)					WHEN ( UART_RD_DATA_RD(14)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(14)						WHEN ( UART_BAUD_CNT_RD(14)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(14)					WHEN ( UART_CNTRL_RD(14)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(14)			WHEN ( UART_TX_FIFO_CNT_RD(14)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(14)			WHEN ( UART_RX_FIFO_CNT_RD(14)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(14)		WHEN ( TEST_TX_WR_DATA_CNT_RD(14)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(15)						WHEN ( UART_WR_DATA_RD(15)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(15)					WHEN ( UART_RD_DATA_RD(15)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(15)						WHEN ( UART_BAUD_CNT_RD(15)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(15)					WHEN ( UART_CNTRL_RD(15)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(15)			WHEN ( UART_TX_FIFO_CNT_RD(15)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(15)			WHEN ( UART_RX_FIFO_CNT_RD(15)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(15)		WHEN ( TEST_TX_WR_DATA_CNT_RD(15)	= '1');	

	
	READMUX13				<= X"0000"&UART_WR_DATA(16)					WHEN ( UART_WR_DATA_RD(16)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(16)					WHEN ( UART_RD_DATA_RD(16)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(16)						WHEN ( UART_BAUD_CNT_RD(16)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(16)					WHEN ( UART_CNTRL_RD(16)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(16)			WHEN ( UART_TX_FIFO_CNT_RD(16)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(16)			WHEN ( UART_RX_FIFO_CNT_RD(16)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(16)		WHEN ( TEST_TX_WR_DATA_CNT_RD(16)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(17)						WHEN ( UART_WR_DATA_RD(17)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(17)					WHEN ( UART_RD_DATA_RD(17)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(17)						WHEN ( UART_BAUD_CNT_RD(17)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(17)					WHEN ( UART_CNTRL_RD(17)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(17)			WHEN ( UART_TX_FIFO_CNT_RD(17)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(17)			WHEN ( UART_RX_FIFO_CNT_RD(17)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(17)		WHEN ( TEST_TX_WR_DATA_CNT_RD(17)	= '1');	


	READMUX14				<= X"0000"&UART_WR_DATA(18)					WHEN ( UART_WR_DATA_RD(18)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(18)					WHEN ( UART_RD_DATA_RD(18)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(18)						WHEN ( UART_BAUD_CNT_RD(18)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(18)					WHEN ( UART_CNTRL_RD(18)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(18)			WHEN ( UART_TX_FIFO_CNT_RD(18)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(18)			WHEN ( UART_RX_FIFO_CNT_RD(18)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(18)		WHEN ( TEST_TX_WR_DATA_CNT_RD(18)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(19)						WHEN ( UART_WR_DATA_RD(19)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(19)					WHEN ( UART_RD_DATA_RD(19)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(19)						WHEN ( UART_BAUD_CNT_RD(19)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(19)					WHEN ( UART_CNTRL_RD(19)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(19)			WHEN ( UART_TX_FIFO_CNT_RD(19)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(19)			WHEN ( UART_RX_FIFO_CNT_RD(19)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(19)		WHEN ( TEST_TX_WR_DATA_CNT_RD(19)	= '1');	

	READMUX15				<= X"0000"&UART_WR_DATA(20)					WHEN ( UART_WR_DATA_RD(20)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(20)					WHEN ( UART_RD_DATA_RD(20)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(20)						WHEN ( UART_BAUD_CNT_RD(20)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(20)					WHEN ( UART_CNTRL_RD(20)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(20)			WHEN ( UART_TX_FIFO_CNT_RD(20)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(20)			WHEN ( UART_RX_FIFO_CNT_RD(20)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(20)		WHEN ( TEST_TX_WR_DATA_CNT_RD(20)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(21)						WHEN ( UART_WR_DATA_RD(21)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(21)					WHEN ( UART_RD_DATA_RD(21)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(21)						WHEN ( UART_BAUD_CNT_RD(21)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(21)					WHEN ( UART_CNTRL_RD(21)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(21)			WHEN ( UART_TX_FIFO_CNT_RD(21)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(21)			WHEN ( UART_RX_FIFO_CNT_RD(21)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(21)		WHEN ( TEST_TX_WR_DATA_CNT_RD(21)	= '1');	

	READMUX16				<= X"0000"&UART_WR_DATA(22)					WHEN ( UART_WR_DATA_RD(22)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(22)					WHEN ( UART_RD_DATA_RD(22)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(22)						WHEN ( UART_BAUD_CNT_RD(22)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(22)					WHEN ( UART_CNTRL_RD(22)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(22)			WHEN ( UART_TX_FIFO_CNT_RD(22)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(22)			WHEN ( UART_RX_FIFO_CNT_RD(22)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(22)		WHEN ( TEST_TX_WR_DATA_CNT_RD(22)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(23)						WHEN ( UART_WR_DATA_RD(23)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(23)					WHEN ( UART_RD_DATA_RD(23)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(23)						WHEN ( UART_BAUD_CNT_RD(23)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(23)					WHEN ( UART_CNTRL_RD(23)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(23)			WHEN ( UART_TX_FIFO_CNT_RD(23)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(23)			WHEN ( UART_RX_FIFO_CNT_RD(23)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(23)		WHEN ( TEST_TX_WR_DATA_CNT_RD(23)	= '1');	

	READMUX17				<= X"0000"&UART_WR_DATA(24)					WHEN ( UART_WR_DATA_RD(24)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(24)					WHEN ( UART_RD_DATA_RD(24)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(24)						WHEN ( UART_BAUD_CNT_RD(24)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(24)					WHEN ( UART_CNTRL_RD(24)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(24)			WHEN ( UART_TX_FIFO_CNT_RD(24)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(24)			WHEN ( UART_RX_FIFO_CNT_RD(24)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(24)		WHEN ( TEST_TX_WR_DATA_CNT_RD(24)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(25)						WHEN ( UART_WR_DATA_RD(25)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(25)					WHEN ( UART_RD_DATA_RD(25)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(25)						WHEN ( UART_BAUD_CNT_RD(25)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(25)					WHEN ( UART_CNTRL_RD(25)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(25)			WHEN ( UART_TX_FIFO_CNT_RD(25)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(25)			WHEN ( UART_RX_FIFO_CNT_RD(25)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(25)		WHEN ( TEST_TX_WR_DATA_CNT_RD(25)	= '1');	

	READMUX18				<= X"0000"&UART_WR_DATA(26)					WHEN ( UART_WR_DATA_RD(26)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(26)					WHEN ( UART_RD_DATA_RD(26)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(26)						WHEN ( UART_BAUD_CNT_RD(26)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(26)					WHEN ( UART_CNTRL_RD(26)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(26)			WHEN ( UART_TX_FIFO_CNT_RD(26)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(26)			WHEN ( UART_RX_FIFO_CNT_RD(26)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(26)		WHEN ( TEST_TX_WR_DATA_CNT_RD(26)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(27)						WHEN ( UART_WR_DATA_RD(27)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(27)					WHEN ( UART_RD_DATA_RD(27)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(27)						WHEN ( UART_BAUD_CNT_RD(27)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(27)					WHEN ( UART_CNTRL_RD(27)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(27)			WHEN ( UART_TX_FIFO_CNT_RD(27)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(27)			WHEN ( UART_RX_FIFO_CNT_RD(27)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(27)		WHEN ( TEST_TX_WR_DATA_CNT_RD(27)	= '1');	

	READMUX19				<= X"0000"&UART_WR_DATA(28)					WHEN ( UART_WR_DATA_RD(28)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(28)					WHEN ( UART_RD_DATA_RD(28)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(28)						WHEN ( UART_BAUD_CNT_RD(28)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(28)					WHEN ( UART_CNTRL_RD(28)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(28)			WHEN ( UART_TX_FIFO_CNT_RD(28)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(28)			WHEN ( UART_RX_FIFO_CNT_RD(28)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(28)		WHEN ( TEST_TX_WR_DATA_CNT_RD(28)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(29)						WHEN ( UART_WR_DATA_RD(29)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(29)					WHEN ( UART_RD_DATA_RD(29)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(29)						WHEN ( UART_BAUD_CNT_RD(29)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(29)					WHEN ( UART_CNTRL_RD(29)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(29)			WHEN ( UART_TX_FIFO_CNT_RD(29)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(29)			WHEN ( UART_RX_FIFO_CNT_RD(29)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(29)		WHEN ( TEST_TX_WR_DATA_CNT_RD(29)	= '1');	

	READMUX20				<= X"0000"&UART_WR_DATA(30)					WHEN ( UART_WR_DATA_RD(30)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(30)					WHEN ( UART_RD_DATA_RD(30)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(30)						WHEN ( UART_BAUD_CNT_RD(30)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(30)					WHEN ( UART_CNTRL_RD(30)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(30)			WHEN ( UART_TX_FIFO_CNT_RD(30)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(30)			WHEN ( UART_RX_FIFO_CNT_RD(30)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(30)		WHEN ( TEST_TX_WR_DATA_CNT_RD(30)	= '1')		ELSE	
	
								X"0000"&UART_WR_DATA(31)						WHEN ( UART_WR_DATA_RD(31)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(31)					WHEN ( UART_RD_DATA_RD(31)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(31)						WHEN ( UART_BAUD_CNT_RD(31)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(31)					WHEN ( UART_CNTRL_RD(31)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(31)			WHEN ( UART_TX_FIFO_CNT_RD(31)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(31)			WHEN ( UART_RX_FIFO_CNT_RD(31)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(31)		WHEN ( TEST_TX_WR_DATA_CNT_RD(31)	= '1');	

	READMUX21				<= X"0000"&UART_WR_DATA(32)					WHEN ( UART_WR_DATA_RD(32)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(32)					WHEN ( UART_RD_DATA_RD(32)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(32)						WHEN ( UART_BAUD_CNT_RD(32)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(32)					WHEN ( UART_CNTRL_RD(32)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(32)			WHEN ( UART_TX_FIFO_CNT_RD(32)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(32)			WHEN ( UART_RX_FIFO_CNT_RD(32)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(32)		WHEN ( TEST_TX_WR_DATA_CNT_RD(32)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(33)						WHEN ( UART_WR_DATA_RD(33)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(33)					WHEN ( UART_RD_DATA_RD(33)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(33)						WHEN ( UART_BAUD_CNT_RD(33)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(33)					WHEN ( UART_CNTRL_RD(33)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(33)			WHEN ( UART_TX_FIFO_CNT_RD(33)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(33)			WHEN ( UART_RX_FIFO_CNT_RD(33)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(33)		WHEN ( TEST_TX_WR_DATA_CNT_RD(33)	= '1');	

	READMUX22				<= X"0000"&UART_WR_DATA(34)					WHEN ( UART_WR_DATA_RD(34)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(34)					WHEN ( UART_RD_DATA_RD(34)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(34)						WHEN ( UART_BAUD_CNT_RD(34)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(34)					WHEN ( UART_CNTRL_RD(34)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(34)			WHEN ( UART_TX_FIFO_CNT_RD(34)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(34)			WHEN ( UART_RX_FIFO_CNT_RD(34)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(34)		WHEN ( TEST_TX_WR_DATA_CNT_RD(34)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(35)						WHEN ( UART_WR_DATA_RD(35)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(35)					WHEN ( UART_RD_DATA_RD(35)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(35)						WHEN ( UART_BAUD_CNT_RD(35)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(35)					WHEN ( UART_CNTRL_RD(35)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(35)			WHEN ( UART_TX_FIFO_CNT_RD(35)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(35)			WHEN ( UART_RX_FIFO_CNT_RD(35)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(35)		WHEN ( TEST_TX_WR_DATA_CNT_RD(35)	= '1');	

	READMUX23   			<= X"0000"&UART_WR_DATA(36)					WHEN ( UART_WR_DATA_RD(36)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(36)					WHEN ( UART_RD_DATA_RD(36)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(36)						WHEN ( UART_BAUD_CNT_RD(36)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(36)					WHEN ( UART_CNTRL_RD(36)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(36)			WHEN ( UART_TX_FIFO_CNT_RD(36)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(36)			WHEN ( UART_RX_FIFO_CNT_RD(36)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(36)		WHEN ( TEST_TX_WR_DATA_CNT_RD(36)	= '1')		ELSE	

								X"0000"&UART_WR_DATA(37)						WHEN ( UART_WR_DATA_RD(37)		= '1')			ELSE
								X"000"&"000"&UART_RD_DATA(37)					WHEN ( UART_RD_DATA_RD(37)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(37)						WHEN ( UART_BAUD_CNT_RD(37)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(37)					WHEN ( UART_CNTRL_RD(37)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(37)			WHEN ( UART_TX_FIFO_CNT_RD(37)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(37)			WHEN ( UART_RX_FIFO_CNT_RD(37)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(37)		WHEN ( TEST_TX_WR_DATA_CNT_RD(37)	= '1');	

	READMUX24   			<= X"0000"&UART_WR_DATA(38)					WHEN ( UART_WR_DATA_RD(38)		= '1')		  	ELSE
								X"000"&"000"&UART_RD_DATA(38)					WHEN ( UART_RD_DATA_RD(38)		= '1')			ELSE
								X"000"&UART_BAUD_CNT(38)						WHEN ( UART_BAUD_CNT_RD(38)		= '1')		ELSE
								X"00000"&"000"&UART_CNTRL(38)					WHEN ( UART_CNTRL_RD(38)			= '1')		ELSE
								X"00000"&"00"&UART_TX_FIFO_CNT(38)			WHEN ( UART_TX_FIFO_CNT_RD(38)	= '1')		ELSE
								X"00000"&"00"&UART_RX_FIFO_CNT(38)			WHEN ( UART_RX_FIFO_CNT_RD(38)	= '1')		ELSE	
								X"00000"&"00"&TEST_TX_WR_DATA_CNT(38)		WHEN ( TEST_TX_WR_DATA_CNT_RD(38)	= '1');




	
	READMUX13_1			<= ON_TIME_OUT(0)										WHEN 	( ON_TIME_OUT_RD(0)			= '1')		ELSE
								TOTAL_TIME_OUT(0)									WHEN 	( TOTAL_TIME_OUT_RD(0)		= '1')		ELSE
								PULSE_COUNT_OUT(0)								WHEN 	( PULSE_COUNT_OUT_RD(0)		= '1')		ELSE
								ON_TIME_OUT(1)										WHEN 	( ON_TIME_OUT_RD(1)			= '1')		ELSE
								TOTAL_TIME_OUT(1)									WHEN 	( TOTAL_TIME_OUT_RD(1)		= '1')		ELSE
								PULSE_COUNT_OUT(1)								WHEN 	( PULSE_COUNT_OUT_RD(1)		= '1')		ELSE
--								ON_TIME_OUT(2)										WHEN 	( ON_TIME_OUT_RD(2)			= '1')		ELSE
--								TOTAL_TIME_OUT(2)									WHEN 	( TOTAL_TIME_OUT_RD(2)		= '1')		ELSE
--								PULSE_COUNT_OUT(2)								WHEN 	( PULSE_COUNT_OUT_RD(2)		= '1')		ELSE
--								ON_TIME_OUT(3)										WHEN 	( ON_TIME_OUT_RD(3)			= '1')		ELSE
--								TOTAL_TIME_OUT(3)									WHEN 	( TOTAL_TIME_OUT_RD(3)		= '1')		ELSE
--								PULSE_COUNT_OUT(3)								WHEN 	( PULSE_COUNT_OUT_RD(3)		= '1')		ELSE
--								ON_TIME_OUT(4)										WHEN 	( ON_TIME_OUT_RD(4)			= '1')		ELSE
--								TOTAL_TIME_OUT(4)									WHEN 	( TOTAL_TIME_OUT_RD(4)		= '1')		ELSE
--								PULSE_COUNT_OUT(4)								WHEN 	( PULSE_COUNT_OUT_RD(4)		= '1')		ELSE
--								ON_TIME_OUT(5)										WHEN 	( ON_TIME_OUT_RD(5)			= '1')		ELSE
--								TOTAL_TIME_OUT(5)									WHEN 	( TOTAL_TIME_OUT_RD(5)		= '1')		ELSE
--								PULSE_COUNT_OUT(5)								WHEN 	( PULSE_COUNT_OUT_RD(5)		= '1')		ELSE
--								ON_TIME_OUT(6)										WHEN 	( ON_TIME_OUT_RD(6)			= '1')		ELSE
--								TOTAL_TIME_OUT(6)									WHEN 	( TOTAL_TIME_OUT_RD(6)		= '1')		ELSE
--								PULSE_COUNT_OUT(6)								WHEN 	( PULSE_COUNT_OUT_RD(6)		= '1')		ELSE
--								ON_TIME_OUT(7)										WHEN 	( ON_TIME_OUT_RD(7)			= '1')		ELSE
--								TOTAL_TIME_OUT(7)									WHEN 	( TOTAL_TIME_OUT_RD(7)		= '1')		ELSE
--								PULSE_COUNT_OUT(7)								WHEN 	( PULSE_COUNT_OUT_RD(7)		= '1')		ELSE
--								ON_TIME_OUT(8)										WHEN 	( ON_TIME_OUT_RD(8)			= '1')		ELSE
--								TOTAL_TIME_OUT(8)									WHEN 	( TOTAL_TIME_OUT_RD(8)		= '1')		ELSE
--								PULSE_COUNT_OUT(8)								WHEN 	( PULSE_COUNT_OUT_RD(8)		= '1')		ELSE
--								ON_TIME_OUT(9)										WHEN 	( ON_TIME_OUT_RD(9)			= '1')		ELSE
--								TOTAL_TIME_OUT(9)									WHEN 	( TOTAL_TIME_OUT_RD(9)		= '1')		ELSE
--								PULSE_COUNT_OUT(9)								WHEN 	( PULSE_COUNT_OUT_RD(9)		= '1')		ELSE
--								ON_TIME_OUT(10)									WHEN 	( ON_TIME_OUT_RD(10)			= '1')		ELSE
--								TOTAL_TIME_OUT(10)								WHEN 	( TOTAL_TIME_OUT_RD(10)		= '1')		ELSE
--								PULSE_COUNT_OUT(10)								WHEN 	( PULSE_COUNT_OUT_RD(10)	= '1')		ELSE
--								ON_TIME_OUT(11)									WHEN 	( ON_TIME_OUT_RD(11)			= '1')		ELSE
--								TOTAL_TIME_OUT(11)								WHEN 	( TOTAL_TIME_OUT_RD(11)		= '1')		ELSE
--								PULSE_COUNT_OUT(11)								WHEN 	( PULSE_COUNT_OUT_RD(11)	= '1')		ELSE
								
--								X"0000000" & '0' & PULSE_CLK10_SEL			WHEN 	( PULSE_CLK10_SEL_RD			= '1')		ELSE
--								X"0000000" & '0' & PULSE_CLK11_SEL			WHEN 	( PULSE_CLK11_SEL_RD			= '1')		ELSE
								
								X"0000000" & "00" & PULSE_DIR_CTRL						WHEN 	( PULSE_DIR_CTRL_RD			= '1')		ELSE
								X"0000000" & "00" & PULSE_OUT_EN							WHEN 	( PULSE_OUT_EN_RD				= '1')		ELSE
								X"0000000" & "00" & PULSE_IN_RESET						WHEN 	( PULSE_IN_RESET_RD			= '1')		;
								
								
								
	READMUX13_2			<= ON_TIME_IN(0)										WHEN 	( ON_TIME_IN_RD(0)			= '1')		ELSE
								TOTAL_TIME_IN(0)									WHEN 	( TOTAL_TIME_IN_RD(0)		= '1')		ELSE
								PULSE_COUNT_IN(0)									WHEN 	( PULSE_COUNT_IN_RD(0)		= '1')		ELSE
								ON_TIME_IN(1)										WHEN 	( ON_TIME_IN_RD(1)			= '1')		ELSE
								TOTAL_TIME_IN(1)									WHEN 	( TOTAL_TIME_IN_RD(1)		= '1')		ELSE
								PULSE_COUNT_IN(1)									WHEN 	( PULSE_COUNT_IN_RD(1)		= '1');

	
								
	READMUX13_1_RD_EN	<= ON_TIME_OUT_RD(0)		OR 	TOTAL_TIME_OUT_RD(0)		OR		PULSE_COUNT_OUT_RD(0)		OR
								ON_TIME_OUT_RD(1)		OR 	TOTAL_TIME_OUT_RD(1)		OR		PULSE_COUNT_OUT_RD(1)		OR
								PULSE_DIR_CTRL_RD		OR 	PULSE_OUT_EN_RD			OR 	PULSE_IN_RESET_RD;
							
	READMUX13_2_RD_EN	<= ON_TIME_IN_RD(0)		OR 	TOTAL_TIME_IN_RD(0)		OR		PULSE_COUNT_IN_RD(0)		OR
								ON_TIME_IN_RD(1)		OR 	TOTAL_TIME_IN_RD(1)		OR		PULSE_COUNT_IN_RD(1)	; 
--								FREQ_COUNT_CLK1_RD	OR 	FREQ_COUNT_CLK2_RD;
							
								
	
								
								
							

						
	RD_DATA_SWAPED	<= RD_DATA(7 DOWNTO 4) & RD_DATA(3 DOWNTO 0) &  RD_DATA(15 DOWNTO 12)& RD_DATA(11 DOWNTO 8) &
							RD_DATA(23 DOWNTO 20) & RD_DATA(19 DOWNTO 16) & RD_DATA(31 DOWNTO 28) & RD_DATA(27 DOWNTO 24);
						
	WR_DATA			<= PCIE_WR_DATA(7 DOWNTO 4) & PCIE_WR_DATA(3 DOWNTO 0) &  PCIE_WR_DATA(15 DOWNTO 12)& PCIE_WR_DATA(11 DOWNTO 8) &		-- SWAPED WR_DATA
							PCIE_WR_DATA(23 DOWNTO 20) & PCIE_WR_DATA(19 DOWNTO 16) & PCIE_WR_DATA(31 DOWNTO 28) & PCIE_WR_DATA(27 DOWNTO 24);
						
	--READ DATA ASSIGNMENT--
	RD_DATA			<= READMUX1_1	WHEN ( READMUX1_1_RD_EN	= '1' ) ELSE
							READMUX1_2;
							
	READMUX1_1		<=	READMUX1 	WHEN ( READMUX1_RD_EN = '1' )		ELSE
							READMUX2		WHEN ( READMUX2_RD_EN = '1' ) 	ELSE
							READMUX3		WHEN ( READMUX3_RD_EN = '1' ) 	ELSE
							READMUX4		WHEN ( READMUX4_RD_EN = '1' ) 	ELSE
							
							READMUX5		WHEN ( READMUX5_RD_EN = '1' ) 	ELSE
							READMUX6		WHEN ( READMUX6_RD_EN = '1' ) 	ELSE
							READMUX7		WHEN ( READMUX7_RD_EN = '1' ) 	ELSE
							READMUX8		WHEN ( READMUX8_RD_EN = '1' )		ELSE
							READMUX9		WHEN ( READMUX9_RD_EN = '1' )  	ELSE
							READMUX10	WHEN ( READMUX10_RD_EN = '1' ) 	ELSE
							READMUX11	WHEN ( READMUX11_RD_EN = '1' ) 	ELSE
							READMUX12	WHEN ( READMUX12_RD_EN = '1' ) 	ELSE
							READMUX13_1	WHEN ( READMUX13_1_RD_EN = '1' ) ELSE
							READMUX13_2	WHEN ( READMUX13_2_RD_EN = '1' );
							
	READMUX1_2		<= READMUX13	WHEN ( READMUX13_RD_EN = '1' ) 	ELSE
							READMUX14	WHEN ( READMUX14_RD_EN = '1' ) 	ELSE
							READMUX15	WHEN ( READMUX15_RD_EN = '1' ) 	ELSE
							READMUX16	WHEN ( READMUX16_RD_EN = '1' ) 	ELSE
							READMUX17	WHEN ( READMUX17_RD_EN = '1' ) 	ELSE
							READMUX18	WHEN ( READMUX18_RD_EN = '1' ) 	ELSE
							READMUX19	WHEN ( READMUX19_RD_EN = '1' ) 	ELSE
							READMUX20	WHEN ( READMUX20_RD_EN = '1' ) 	ELSE
							READMUX21	WHEN ( READMUX21_RD_EN = '1' ) 	ELSE
							READMUX22	WHEN ( READMUX22_RD_EN = '1' ) 	ELSE
							READMUX23	WHEN ( READMUX23_RD_EN = '1' ) 	ELSE
							READMUX24	WHEN ( READMUX24_RD_EN = '1' );	
	
	--READ MUX READ ENABLE--
	READMUX1_1_RD_EN	<= READMUX1_RD_EN OR READMUX2_RD_EN OR READMUX3_RD_EN OR READMUX4_RD_EN OR
								READMUX5_RD_EN OR READMUX6_RD_EN OR READMUX7_RD_EN OR READMUX8_RD_EN;
	
	READMUX1_RD_EN		<= BRDID_RD 	OR BRDVERSION_RD 	OR TYPID_FPGAVER_RD OR SCRATCHPAD_RD OR GPIO_MSB_DATA_RD OR
								GPIO_LSB_DATA_RD OR GPIO_LSB_CNTRL_RD OR GPIO_MSB_CNTRL_RD;
								
--	READMUX2_RD_EN		<= UART_GRP_SEL_RD	OR SPI_GRP_SEL_RD	OR I2C_GRP_SEL_RD	OR	PULSE_GRP_SEL_RD ;
								
	READMUX3_RD_EN		<= GPIO_LSB_STS_RD OR GPIO_MSB_STS_RD OR UART_WR_DATA_RD(0) OR UART_RD_DATA_RD(0) OR
								UART_BAUD_CNT_RD(0) OR UART_CNTRL_RD(0) OR UART_TX_FIFO_CNT_RD(0) OR UART_RX_FIFO_CNT_RD(0)
								OR TEST_TX_WR_DATA_CNT_RD(0);
								
	READMUX4_RD_EN		<= UART_WR_DATA_RD(1) OR UART_RD_DATA_RD(1) OR UART_BAUD_CNT_RD(1) OR UART_CNTRL_RD(1) OR 
								UART_TX_FIFO_CNT_RD(1) OR UART_RX_FIFO_CNT_RD(1) OR TEST_TX_WR_DATA_CNT_RD(1) OR UART_WR_DATA_RD(2) OR UART_RD_DATA_RD(2);
								
	READMUX5_RD_EN		<= UART_BAUD_CNT_RD(2) OR UART_CNTRL_RD(2) OR UART_TX_FIFO_CNT_RD(2) OR UART_RX_FIFO_CNT_RD(2) OR TEST_TX_WR_DATA_CNT_RD(2) OR
								UART_WR_DATA_RD(3) OR UART_RD_DATA_RD(3) OR UART_BAUD_CNT_RD(3) OR UART_CNTRL_RD(3);
								
	READMUX6_RD_EN		<= UART_TX_FIFO_CNT_RD(3) OR UART_RX_FIFO_CNT_RD(3) OR TEST_TX_WR_DATA_CNT_RD(3) OR UART_WR_DATA_RD(4) OR UART_RD_DATA_RD(4) OR 
								UART_BAUD_CNT_RD(4) OR UART_CNTRL_RD(4) OR UART_TX_FIFO_CNT_RD(4) OR UART_RX_FIFO_CNT_RD(4) OR TEST_TX_WR_DATA_CNT_RD(4);

	READMUX7_RD_EN		<= UART_WR_DATA_RD(5) OR UART_RD_DATA_RD(5) OR UART_BAUD_CNT_RD(5) OR UART_CNTRL_RD(5) OR 
								UART_TX_FIFO_CNT_RD(5) OR UART_RX_FIFO_CNT_RD(5) OR TEST_TX_WR_DATA_CNT_RD(5) OR UART_WR_DATA_RD(6) OR UART_RD_DATA_RD(6);
								
	READMUX8_RD_EN		<= UART_BAUD_CNT_RD(6) OR UART_CNTRL_RD(6) OR UART_TX_FIFO_CNT_RD(6) OR UART_RX_FIFO_CNT_RD(6) OR TEST_TX_WR_DATA_CNT_RD(6) OR
								UART_WR_DATA_RD(7) OR UART_RD_DATA_RD(7) OR UART_BAUD_CNT_RD(7) OR UART_CNTRL_RD(7) OR 
								UART_TX_FIFO_CNT_RD(7) OR UART_RX_FIFO_CNT_RD(7) OR TEST_TX_WR_DATA_CNT_RD(7);
								
								
	READMUX9_RD_EN		<= UART_RD_DATA_RD(8) OR UART_WR_DATA_RD(8) OR UART_BAUD_CNT_RD(8) OR UART_CNTRL_RD(8) 
								OR UART_TX_FIFO_CNT_RD(8) OR UART_RX_FIFO_CNT_RD(8) OR TEST_TX_WR_DATA_CNT_RD(8) OR
								UART_RD_DATA_RD(9) OR UART_WR_DATA_RD(9) OR UART_BAUD_CNT_RD(9) OR UART_CNTRL_RD(9) 
								OR UART_TX_FIFO_CNT_RD(9) OR UART_RX_FIFO_CNT_RD(9) OR TEST_TX_WR_DATA_CNT_RD(9) ;
								
	READMUX10_RD_EN	<= UART_RD_DATA_RD(10) OR UART_WR_DATA_RD(10) OR UART_BAUD_CNT_RD(10) OR UART_CNTRL_RD(10) 
								OR UART_TX_FIFO_CNT_RD(10) OR UART_RX_FIFO_CNT_RD(10) OR TEST_TX_WR_DATA_CNT_RD(10) OR
								UART_RD_DATA_RD(11) OR UART_WR_DATA_RD(11) OR UART_BAUD_CNT_RD(11) OR UART_CNTRL_RD(11) 
								OR UART_TX_FIFO_CNT_RD(11) OR UART_RX_FIFO_CNT_RD(11) OR TEST_TX_WR_DATA_CNT_RD(11) ;

	READMUX11_RD_EN	<= UART_RD_DATA_RD(12) OR UART_WR_DATA_RD(12) OR UART_BAUD_CNT_RD(12) OR UART_CNTRL_RD(12) 
								OR UART_TX_FIFO_CNT_RD(12) OR UART_RX_FIFO_CNT_RD(12) OR TEST_TX_WR_DATA_CNT_RD(12) OR
								UART_RD_DATA_RD(13) OR UART_WR_DATA_RD(13) OR UART_BAUD_CNT_RD(13) OR UART_CNTRL_RD(13) 
								OR UART_TX_FIFO_CNT_RD(13) OR UART_RX_FIFO_CNT_RD(13) OR TEST_TX_WR_DATA_CNT_RD(13) ;


	READMUX12_RD_EN		<= UART_RD_DATA_RD(14) OR UART_WR_DATA_RD(14) OR UART_BAUD_CNT_RD(14) OR UART_CNTRL_RD(14) 
								OR UART_TX_FIFO_CNT_RD(14) OR UART_RX_FIFO_CNT_RD(14) OR TEST_TX_WR_DATA_CNT_RD(14) OR
								UART_RD_DATA_RD(15) OR UART_WR_DATA_RD(15) OR UART_BAUD_CNT_RD(15) OR UART_CNTRL_RD(15) 
								OR UART_TX_FIFO_CNT_RD(15) OR UART_RX_FIFO_CNT_RD(15) OR TEST_TX_WR_DATA_CNT_RD(15) ;

	READMUX13_RD_EN		<= UART_RD_DATA_RD(16) OR UART_WR_DATA_RD(16) OR UART_BAUD_CNT_RD(16) OR UART_CNTRL_RD(16) 
								OR UART_TX_FIFO_CNT_RD(16) OR UART_RX_FIFO_CNT_RD(16) OR TEST_TX_WR_DATA_CNT_RD(16) OR
								UART_RD_DATA_RD(17) OR UART_WR_DATA_RD(17) OR UART_BAUD_CNT_RD(17) OR UART_CNTRL_RD(17) 
								OR UART_TX_FIFO_CNT_RD(17) OR UART_RX_FIFO_CNT_RD(17) OR TEST_TX_WR_DATA_CNT_RD(17) ;

	READMUX14_RD_EN		<= UART_RD_DATA_RD(18) OR UART_WR_DATA_RD(18) OR UART_BAUD_CNT_RD(18) OR UART_CNTRL_RD(18) 
								OR UART_TX_FIFO_CNT_RD(18) OR UART_RX_FIFO_CNT_RD(18) OR TEST_TX_WR_DATA_CNT_RD(18) OR
								UART_RD_DATA_RD(19) OR UART_WR_DATA_RD(19) OR UART_BAUD_CNT_RD(19) OR UART_CNTRL_RD(19) 
								OR UART_TX_FIFO_CNT_RD(19) OR UART_RX_FIFO_CNT_RD(19) OR TEST_TX_WR_DATA_CNT_RD(19) ;

	READMUX15_RD_EN		<= UART_RD_DATA_RD(20) OR UART_WR_DATA_RD(20) OR UART_BAUD_CNT_RD(20) OR UART_CNTRL_RD(20) 
								OR UART_TX_FIFO_CNT_RD(20) OR UART_RX_FIFO_CNT_RD(20) OR TEST_TX_WR_DATA_CNT_RD(20) OR
								UART_RD_DATA_RD(21) OR UART_WR_DATA_RD(21) OR UART_BAUD_CNT_RD(21) OR UART_CNTRL_RD(21) 
								OR UART_TX_FIFO_CNT_RD(21) OR UART_RX_FIFO_CNT_RD(21) OR TEST_TX_WR_DATA_CNT_RD(21) ;

	READMUX16_RD_EN		<= UART_RD_DATA_RD(22) OR UART_WR_DATA_RD(22) OR UART_BAUD_CNT_RD(22) OR UART_CNTRL_RD(22) 
								OR UART_TX_FIFO_CNT_RD(22) OR UART_RX_FIFO_CNT_RD(22) OR TEST_TX_WR_DATA_CNT_RD(22) OR
								UART_RD_DATA_RD(23) OR UART_WR_DATA_RD(23) OR UART_BAUD_CNT_RD(23) OR UART_CNTRL_RD(23) 
								OR UART_TX_FIFO_CNT_RD(23) OR UART_RX_FIFO_CNT_RD(23) OR TEST_TX_WR_DATA_CNT_RD(23) ;

	READMUX17_RD_EN		<= UART_RD_DATA_RD(24) OR UART_WR_DATA_RD(24) OR UART_BAUD_CNT_RD(24) OR UART_CNTRL_RD(24) 
								OR UART_TX_FIFO_CNT_RD(24) OR UART_RX_FIFO_CNT_RD(24) OR TEST_TX_WR_DATA_CNT_RD(24) OR
								UART_RD_DATA_RD(25) OR UART_WR_DATA_RD(25) OR UART_BAUD_CNT_RD(25) OR UART_CNTRL_RD(25) 
								OR UART_TX_FIFO_CNT_RD(25) OR UART_RX_FIFO_CNT_RD(25) OR TEST_TX_WR_DATA_CNT_RD(25) ;

	READMUX18_RD_EN		<= UART_RD_DATA_RD(26) OR UART_WR_DATA_RD(26) OR UART_BAUD_CNT_RD(26) OR UART_CNTRL_RD(26) 
								OR UART_TX_FIFO_CNT_RD(26) OR UART_RX_FIFO_CNT_RD(26) OR TEST_TX_WR_DATA_CNT_RD(26) OR
								UART_RD_DATA_RD(27) OR UART_WR_DATA_RD(27) OR UART_BAUD_CNT_RD(27) OR UART_CNTRL_RD(27) 
								OR UART_TX_FIFO_CNT_RD(27) OR UART_RX_FIFO_CNT_RD(27) OR TEST_TX_WR_DATA_CNT_RD(27) ;


	READMUX19_RD_EN		<= UART_RD_DATA_RD(28) OR UART_WR_DATA_RD(28) OR UART_BAUD_CNT_RD(28) OR UART_CNTRL_RD(28) 
								OR UART_TX_FIFO_CNT_RD(28) OR UART_RX_FIFO_CNT_RD(28) OR TEST_TX_WR_DATA_CNT_RD(28) OR
								UART_RD_DATA_RD(29) OR UART_WR_DATA_RD(29) OR UART_BAUD_CNT_RD(29) OR UART_CNTRL_RD(29) 
								OR UART_TX_FIFO_CNT_RD(29) OR UART_RX_FIFO_CNT_RD(29) OR TEST_TX_WR_DATA_CNT_RD(29) ;


	READMUX20_RD_EN		<= UART_RD_DATA_RD(30) OR UART_WR_DATA_RD(30) OR UART_BAUD_CNT_RD(30) OR UART_CNTRL_RD(30) 
								OR UART_TX_FIFO_CNT_RD(30) OR UART_RX_FIFO_CNT_RD(30) OR TEST_TX_WR_DATA_CNT_RD(30) OR
								UART_RD_DATA_RD(31) OR UART_WR_DATA_RD(31) OR UART_BAUD_CNT_RD(31) OR UART_CNTRL_RD(31) 
								OR UART_TX_FIFO_CNT_RD(31) OR UART_RX_FIFO_CNT_RD(31) OR TEST_TX_WR_DATA_CNT_RD(31) ;


	READMUX21_RD_EN		<= UART_RD_DATA_RD(32) OR UART_WR_DATA_RD(32) OR UART_BAUD_CNT_RD(32) OR UART_CNTRL_RD(32) 
								OR UART_TX_FIFO_CNT_RD(32) OR UART_RX_FIFO_CNT_RD(32) OR TEST_TX_WR_DATA_CNT_RD(32) OR
								UART_RD_DATA_RD(33) OR UART_WR_DATA_RD(33) OR UART_BAUD_CNT_RD(33) OR UART_CNTRL_RD(33) 
								OR UART_TX_FIFO_CNT_RD(33) OR UART_RX_FIFO_CNT_RD(33) OR TEST_TX_WR_DATA_CNT_RD(33) ;


	READMUX22_RD_EN		<= UART_RD_DATA_RD(34) OR UART_WR_DATA_RD(34) OR UART_BAUD_CNT_RD(34) OR UART_CNTRL_RD(34) 
								OR UART_TX_FIFO_CNT_RD(34) OR UART_RX_FIFO_CNT_RD(34) OR TEST_TX_WR_DATA_CNT_RD(34) OR
								UART_RD_DATA_RD(35) OR UART_WR_DATA_RD(35) OR UART_BAUD_CNT_RD(35) OR UART_CNTRL_RD(35) 
								OR UART_TX_FIFO_CNT_RD(35) OR UART_RX_FIFO_CNT_RD(35) OR TEST_TX_WR_DATA_CNT_RD(35) ;


	READMUX23_RD_EN		<= UART_RD_DATA_RD(36) OR UART_WR_DATA_RD(36) OR UART_BAUD_CNT_RD(36) OR UART_CNTRL_RD(36) 
								OR UART_TX_FIFO_CNT_RD(36) OR UART_RX_FIFO_CNT_RD(36) OR TEST_TX_WR_DATA_CNT_RD(36) OR
								UART_RD_DATA_RD(37) OR UART_WR_DATA_RD(37) OR UART_BAUD_CNT_RD(37) OR UART_CNTRL_RD(37) 
								OR UART_TX_FIFO_CNT_RD(37) OR UART_RX_FIFO_CNT_RD(37) OR TEST_TX_WR_DATA_CNT_RD(37) ;


	READMUX24_RD_EN		<= UART_RD_DATA_RD(38) OR UART_WR_DATA_RD(38) OR UART_BAUD_CNT_RD(38) OR UART_CNTRL_RD(38) 
								OR UART_TX_FIFO_CNT_RD(38) OR UART_RX_FIFO_CNT_RD(38) OR TEST_TX_WR_DATA_CNT_RD(38);



	
											
-------------------------------------------------------------
-----------------WRITE PROCESS--------------------------------
-------------------------------------------------------------		

	--SCRATCHPAD
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		IF( RESET = '1' ) THEN
			SCRATCHPAD			<=	(OTHERS => '0');		
		ELSIF( RISING_EDGE( CLK_62P5MHZ_PCI ) )THEN
			IF( SCRATCHPAD_WR = '1' ) THEN	
				SCRATCHPAD		<=	WR_DATA;
			END IF;
		END IF;		
	END PROCESS;	
		
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		IF( RESET = '1') THEN
			UART_GRP_SEL			<=	(OTHERS => '0');		
		ELSIF( RISING_EDGE( CLK_62P5MHZ_PCI ) )THEN
			IF( UART_GRP_SEL_WR = '1' ) THEN	
				UART_GRP_SEL		<=	WR_DATA(27 DOWNTO 0);
			END IF;
		END IF;		
	END PROCESS;
	

	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		IF( RESET = '1') THEN
			PULSE_GRP_SEL			<=	(OTHERS => '0');		
		ELSIF( RISING_EDGE( CLK_62P5MHZ_PCI ) )THEN
			IF( PULSE_GRP_SEL_WR = '1' ) THEN	
				PULSE_GRP_SEL		<=	WR_DATA(3 DOWNTO 0);
			END IF;
		END IF;		
	END PROCESS;
	
	
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		IF (RESET = '1') THEN
			GPIO_DATA(45 DOWNTO 0)	<= (OTHERS => '0');
		ELSIF(RISING_EDGE( CLK_62P5MHZ_PCI )) THEN
			IF (GPIO_LSB_DATA_WR = '1') THEN
				GPIO_DATA(31 DOWNTO 0) <= WR_DATA;
			END IF;
			IF (GPIO_MSB_DATA_WR = '1') THEN
				GPIO_DATA(45 DOWNTO 32) <= WR_DATA(13 DOWNTO 0);
			END IF;
		END IF;
	END PROCESS;
	
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		IF (RESET = '1') THEN
			GPIO_CNTRL(45 DOWNTO 0)	<= (OTHERS => '0');
		ELSIF(RISING_EDGE( CLK_62P5MHZ_PCI )) THEN
			IF (GPIO_LSB_CNTRL_WR = '1') THEN
				GPIO_CNTRL(31 DOWNTO 0) <= WR_DATA;
			END IF;
			IF (GPIO_MSB_CNTRL_WR = '1') THEN
				GPIO_CNTRL(45 DOWNTO 32) <= WR_DATA(13 DOWNTO 0);
			END IF;
		END IF;
	END PROCESS;
	
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		FOR I IN 0 TO 13 LOOP
			IF (RESET = '1') THEN
				UART_WR_DATA(I)	<= (OTHERS => '0');	
			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
				IF (UART_WR_DATA_WR(I) = '1') THEN
					UART_WR_DATA(I)	<= WR_DATA(15 DOWNTO 0);
				END IF;
			END IF;
		END LOOP;
	END PROCESS;
	
--	PROCESS(CLK_62P5MHZ_PCI,RESET)
--	BEGIN
--		FOR I IN 0 TO 13 LOOP
--			IF (RESET = '1') THEN
--				UART_BAUD_CNT(I)	<= X"01458";	
--			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
--				IF (UART_BAUD_CNT_WR(I) = '1') THEN
--					UART_BAUD_CNT(I)	<= WR_DATA(19 DOWNTO 0);
--				END IF;
--			END IF;
--		END LOOP;
--	END PROCESS;
	
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		FOR I IN 0 TO 13 LOOP
			IF (RESET = '1') THEN
				UART_CNTRL(I)(5 DOWNTO 0)	<= "110001";
				UART_CNTRL(I)(8)				<= '0';		
			ELSIF RST_CNT < 10 THEN
				UART_CNTRL(I)(5 DOWNTO 0)	<= "000001";
				UART_CNTRL(I)(8)				<= '0';					
			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
				IF (UART_CNTRL_WR(I) = '1') THEN
					UART_CNTRL(I)(5 DOWNTO 0)	<= WR_DATA(5 DOWNTO 0);
					UART_CNTRL(I)(8)				<= WR_DATA(8);
				END IF;
			END IF;
		END LOOP;
	END PROCESS;
	
	
	
	
	
	
	
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		FOR I IN 0 TO 11 LOOP
			IF (RESET = '1') THEN
				ON_TIME_OUT(I)	<= (OTHERS =>'0');	
			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
				IF (ON_TIME_OUT_WR(I) = '1') THEN
					ON_TIME_OUT(I)	<= WR_DATA;
				END IF;
			END IF;
		END LOOP;
	END PROCESS;

	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		FOR I IN 0 TO 11 LOOP
			IF (RESET = '1') THEN
				TOTAL_TIME_OUT(I)	<= (OTHERS =>'0');	
			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
				IF (TOTAL_TIME_OUT_WR(I) = '1') THEN
					TOTAL_TIME_OUT(I)	<= WR_DATA;
				END IF;
			END IF;
		END LOOP;
	END PROCESS;

	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		FOR I IN 0 TO 11 LOOP
			IF (RESET = '1') THEN
				PULSE_COUNT_OUT(I)	<= (OTHERS =>'0');	
			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
				IF (PULSE_COUNT_OUT_WR(I) = '1') THEN
					PULSE_COUNT_OUT(I)	<= WR_DATA;
				END IF;
			END IF;
		END LOOP;
	END PROCESS;
	
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		IF (RESET = '1') THEN
			PULSE_CLK10_SEL	<= (OTHERS =>'0');	
		ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
			IF (PULSE_CLK10_SEL_WR = '1') THEN
				PULSE_CLK10_SEL	<= WR_DATA(2 DOWNTO 0);
			END IF;
		END IF;
	END PROCESS;
	
	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
		IF (RESET = '1') THEN
			PULSE_CLK11_SEL	<= (OTHERS =>'0');	
		ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
			IF (PULSE_CLK11_SEL_WR = '1') THEN
				PULSE_CLK11_SEL	<= WR_DATA(2 DOWNTO 0);
			END IF;
		END IF;
	END PROCESS;
	
	

	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
			IF (RESET = '1') THEN
				PULSE_DIR_CTRL	<= (OTHERS =>'0');	
			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
				IF (PULSE_DIR_CTRL_WR = '1') THEN
					PULSE_DIR_CTRL		<= WR_DATA(11 DOWNTO 0);
				END IF;
			END IF;
	END PROCESS;

	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
			IF (RESET = '1') THEN
				PULSE_IN_RESET	<= (OTHERS =>'0');	
			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
				IF (PULSE_IN_RESET_WR = '1') THEN
					PULSE_IN_RESET		<= WR_DATA(11 DOWNTO 0);
				END IF;
			END IF;
	END PROCESS;

	PROCESS(CLK_62P5MHZ_PCI,RESET)
	BEGIN
			IF (RESET = '1') THEN
				PULSE_OUT_EN	<= (OTHERS =>'0');	
			ELSIF(RISING_EDGE(CLK_62P5MHZ_PCI)) THEN
				IF (PULSE_OUT_EN_WR = '1') THEN
					PULSE_OUT_EN		<= WR_DATA(11 DOWNTO 0);
				END IF;
			END IF;
	END PROCESS;

	

	--------------------- CLK GEN ---------------
	
	PROCESS(CLK_10MHz)
	BEGIN
	IF RISING_EDGE(CLK_10MHz) THEN
		CLK_CNT <= CLK_CNT + 1;
	END IF;
	END PROCESS;
	
	CLK_312p5KHz <= CLK_CNT(4);
	
	PROCESS(CLK_12p8MHz)
	BEGIN
	IF RISING_EDGE(CLK_12p8MHz) THEN
		CLK_CNT1 <= CLK_CNT1 + 1;
	END IF;
	END PROCESS;
	
	CLK_1600KHz <= CLK_CNT1(2);
	CLK_400KHz 	<= CLK_CNT1(4);
	
	-----------------------------------------------
	
	PROCESS(RESET,RST_CNT,CLK_50MHZ)
	BEGIN
	IF RESET = '1' THEN
		RST_CNT	<= (OTHERS =>'0');
	ELSIF RISING_EDGE(CLK_50MHZ) THEN
		IF RST_CNT < 20 THEN
			RST_CNT	<= RST_CNT + 1;
		ELSE
			RST_CNT	<= RST_CNT;
		END IF;
	END IF;
	END PROCESS;
	


end Behavioral;
